
TUT_LCD1602_PARALLEL_F103_CUBEIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029c8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08002ad4  08002ad4  00012ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b60  08002b60  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002b60  08002b60  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b60  08002b60  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b60  08002b60  00012b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b64  08002b64  00012b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002b68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000070  08002bd8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08002bd8  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009395  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001926  00000000  00000000  0002942e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b40  00000000  00000000  0002ad58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a68  00000000  00000000  0002b898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014701  00000000  00000000  0002c300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a419  00000000  00000000  00040a01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00071adf  00000000  00000000  0004ae1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bc8f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003288  00000000  00000000  000bc94c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002abc 	.word	0x08002abc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002abc 	.word	0x08002abc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <delay>:
#define timer htim1


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	4603      	mov	r3, r0
 8000164:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 8000166:	4b08      	ldr	r3, [pc, #32]	; (8000188 <delay+0x2c>)
 8000168:	681b      	ldr	r3, [r3, #0]
 800016a:	2200      	movs	r2, #0
 800016c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 800016e:	bf00      	nop
 8000170:	4b05      	ldr	r3, [pc, #20]	; (8000188 <delay+0x2c>)
 8000172:	681b      	ldr	r3, [r3, #0]
 8000174:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000176:	88fb      	ldrh	r3, [r7, #6]
 8000178:	429a      	cmp	r2, r3
 800017a:	d3f9      	bcc.n	8000170 <delay+0x14>
}
 800017c:	bf00      	nop
 800017e:	bf00      	nop
 8000180:	370c      	adds	r7, #12
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	200000ac 	.word	0x200000ac

0800018c <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b082      	sub	sp, #8
 8000190:	af00      	add	r7, sp, #0
 8000192:	4603      	mov	r3, r0
 8000194:	6039      	str	r1, [r7, #0]
 8000196:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 8000198:	683b      	ldr	r3, [r7, #0]
 800019a:	b2db      	uxtb	r3, r3
 800019c:	461a      	mov	r2, r3
 800019e:	2102      	movs	r1, #2
 80001a0:	4820      	ldr	r0, [pc, #128]	; (8000224 <send_to_lcd+0x98>)
 80001a2:	f000 feaf 	bl	8000f04 <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 80001a6:	79fb      	ldrb	r3, [r7, #7]
 80001a8:	08db      	lsrs	r3, r3, #3
 80001aa:	b2db      	uxtb	r3, r3
 80001ac:	f003 0301 	and.w	r3, r3, #1
 80001b0:	b2db      	uxtb	r3, r3
 80001b2:	461a      	mov	r2, r3
 80001b4:	2180      	movs	r1, #128	; 0x80
 80001b6:	481b      	ldr	r0, [pc, #108]	; (8000224 <send_to_lcd+0x98>)
 80001b8:	f000 fea4 	bl	8000f04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 80001bc:	79fb      	ldrb	r3, [r7, #7]
 80001be:	089b      	lsrs	r3, r3, #2
 80001c0:	b2db      	uxtb	r3, r3
 80001c2:	f003 0301 	and.w	r3, r3, #1
 80001c6:	b2db      	uxtb	r3, r3
 80001c8:	461a      	mov	r2, r3
 80001ca:	2140      	movs	r1, #64	; 0x40
 80001cc:	4815      	ldr	r0, [pc, #84]	; (8000224 <send_to_lcd+0x98>)
 80001ce:	f000 fe99 	bl	8000f04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 80001d2:	79fb      	ldrb	r3, [r7, #7]
 80001d4:	085b      	lsrs	r3, r3, #1
 80001d6:	b2db      	uxtb	r3, r3
 80001d8:	f003 0301 	and.w	r3, r3, #1
 80001dc:	b2db      	uxtb	r3, r3
 80001de:	461a      	mov	r2, r3
 80001e0:	2120      	movs	r1, #32
 80001e2:	4810      	ldr	r0, [pc, #64]	; (8000224 <send_to_lcd+0x98>)
 80001e4:	f000 fe8e 	bl	8000f04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 80001e8:	79fb      	ldrb	r3, [r7, #7]
 80001ea:	f003 0301 	and.w	r3, r3, #1
 80001ee:	b2db      	uxtb	r3, r3
 80001f0:	461a      	mov	r2, r3
 80001f2:	2110      	movs	r1, #16
 80001f4:	480b      	ldr	r0, [pc, #44]	; (8000224 <send_to_lcd+0x98>)
 80001f6:	f000 fe85 	bl	8000f04 <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 80001fa:	2201      	movs	r2, #1
 80001fc:	2108      	movs	r1, #8
 80001fe:	4809      	ldr	r0, [pc, #36]	; (8000224 <send_to_lcd+0x98>)
 8000200:	f000 fe80 	bl	8000f04 <HAL_GPIO_WritePin>
	delay (20);
 8000204:	2014      	movs	r0, #20
 8000206:	f7ff ffa9 	bl	800015c <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 800020a:	2200      	movs	r2, #0
 800020c:	2108      	movs	r1, #8
 800020e:	4805      	ldr	r0, [pc, #20]	; (8000224 <send_to_lcd+0x98>)
 8000210:	f000 fe78 	bl	8000f04 <HAL_GPIO_WritePin>
	delay (20);
 8000214:	2014      	movs	r0, #20
 8000216:	f7ff ffa1 	bl	800015c <delay>
}
 800021a:	bf00      	nop
 800021c:	3708      	adds	r7, #8
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}
 8000222:	bf00      	nop
 8000224:	40010800 	.word	0x40010800

08000228 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af00      	add	r7, sp, #0
 800022e:	4603      	mov	r3, r0
 8000230:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	091b      	lsrs	r3, r3, #4
 8000236:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8000238:	7bfb      	ldrb	r3, [r7, #15]
 800023a:	2100      	movs	r1, #0
 800023c:	4618      	mov	r0, r3
 800023e:	f7ff ffa5 	bl	800018c <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 8000242:	79fb      	ldrb	r3, [r7, #7]
 8000244:	f003 030f 	and.w	r3, r3, #15
 8000248:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 800024a:	7bfb      	ldrb	r3, [r7, #15]
 800024c:	2100      	movs	r1, #0
 800024e:	4618      	mov	r0, r3
 8000250:	f7ff ff9c 	bl	800018c <send_to_lcd>
}
 8000254:	bf00      	nop
 8000256:	3710      	adds	r7, #16
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}

0800025c <lcd_send_data>:

void lcd_send_data (char data)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b084      	sub	sp, #16
 8000260:	af00      	add	r7, sp, #0
 8000262:	4603      	mov	r3, r0
 8000264:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 8000266:	79fb      	ldrb	r3, [r7, #7]
 8000268:	091b      	lsrs	r3, r3, #4
 800026a:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 800026c:	7bfb      	ldrb	r3, [r7, #15]
 800026e:	2101      	movs	r1, #1
 8000270:	4618      	mov	r0, r3
 8000272:	f7ff ff8b 	bl	800018c <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 8000276:	79fb      	ldrb	r3, [r7, #7]
 8000278:	f003 030f 	and.w	r3, r3, #15
 800027c:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 800027e:	7bfb      	ldrb	r3, [r7, #15]
 8000280:	2101      	movs	r1, #1
 8000282:	4618      	mov	r0, r3
 8000284:	f7ff ff82 	bl	800018c <send_to_lcd>
}
 8000288:	bf00      	nop
 800028a:	3710      	adds	r7, #16
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}

08000290 <lcd_clear>:

void lcd_clear (void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8000294:	2001      	movs	r0, #1
 8000296:	f7ff ffc7 	bl	8000228 <lcd_send_cmd>
	HAL_Delay(2);
 800029a:	2002      	movs	r0, #2
 800029c:	f000 fba6 	bl	80009ec <HAL_Delay>
}
 80002a0:	bf00      	nop
 80002a2:	bd80      	pop	{r7, pc}

080002a4 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
 80002ac:	6039      	str	r1, [r7, #0]
    switch (row)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d003      	beq.n	80002bc <lcd_put_cur+0x18>
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	2b01      	cmp	r3, #1
 80002b8:	d005      	beq.n	80002c6 <lcd_put_cur+0x22>
 80002ba:	e009      	b.n	80002d0 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80002bc:	683b      	ldr	r3, [r7, #0]
 80002be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002c2:	603b      	str	r3, [r7, #0]
            break;
 80002c4:	e004      	b.n	80002d0 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80002cc:	603b      	str	r3, [r7, #0]
            break;
 80002ce:	bf00      	nop
    }

    lcd_send_cmd (col);
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	b2db      	uxtb	r3, r3
 80002d4:	4618      	mov	r0, r3
 80002d6:	f7ff ffa7 	bl	8000228 <lcd_send_cmd>
}
 80002da:	bf00      	nop
 80002dc:	3708      	adds	r7, #8
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}

080002e2 <lcd_init>:


void lcd_init (void)
{
 80002e2:	b580      	push	{r7, lr}
 80002e4:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80002e6:	2032      	movs	r0, #50	; 0x32
 80002e8:	f000 fb80 	bl	80009ec <HAL_Delay>
	lcd_send_cmd (0x30);
 80002ec:	2030      	movs	r0, #48	; 0x30
 80002ee:	f7ff ff9b 	bl	8000228 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80002f2:	2005      	movs	r0, #5
 80002f4:	f000 fb7a 	bl	80009ec <HAL_Delay>
	lcd_send_cmd (0x30);
 80002f8:	2030      	movs	r0, #48	; 0x30
 80002fa:	f7ff ff95 	bl	8000228 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80002fe:	2001      	movs	r0, #1
 8000300:	f000 fb74 	bl	80009ec <HAL_Delay>
	lcd_send_cmd (0x30);
 8000304:	2030      	movs	r0, #48	; 0x30
 8000306:	f7ff ff8f 	bl	8000228 <lcd_send_cmd>
	HAL_Delay(10);
 800030a:	200a      	movs	r0, #10
 800030c:	f000 fb6e 	bl	80009ec <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000310:	2020      	movs	r0, #32
 8000312:	f7ff ff89 	bl	8000228 <lcd_send_cmd>
	HAL_Delay(10);
 8000316:	200a      	movs	r0, #10
 8000318:	f000 fb68 	bl	80009ec <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800031c:	2028      	movs	r0, #40	; 0x28
 800031e:	f7ff ff83 	bl	8000228 <lcd_send_cmd>
	HAL_Delay(1);
 8000322:	2001      	movs	r0, #1
 8000324:	f000 fb62 	bl	80009ec <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000328:	2008      	movs	r0, #8
 800032a:	f7ff ff7d 	bl	8000228 <lcd_send_cmd>
	HAL_Delay(1);
 800032e:	2001      	movs	r0, #1
 8000330:	f000 fb5c 	bl	80009ec <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000334:	2001      	movs	r0, #1
 8000336:	f7ff ff77 	bl	8000228 <lcd_send_cmd>
	HAL_Delay(1);
 800033a:	2001      	movs	r0, #1
 800033c:	f000 fb56 	bl	80009ec <HAL_Delay>
	HAL_Delay(1);
 8000340:	2001      	movs	r0, #1
 8000342:	f000 fb53 	bl	80009ec <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000346:	2006      	movs	r0, #6
 8000348:	f7ff ff6e 	bl	8000228 <lcd_send_cmd>
	HAL_Delay(1);
 800034c:	2001      	movs	r0, #1
 800034e:	f000 fb4d 	bl	80009ec <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000352:	200c      	movs	r0, #12
 8000354:	f7ff ff68 	bl	8000228 <lcd_send_cmd>
}
 8000358:	bf00      	nop
 800035a:	bd80      	pop	{r7, pc}

0800035c <lcd_send_string>:

void lcd_send_string (char *str)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000364:	e006      	b.n	8000374 <lcd_send_string+0x18>
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	1c5a      	adds	r2, r3, #1
 800036a:	607a      	str	r2, [r7, #4]
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	4618      	mov	r0, r3
 8000370:	f7ff ff74 	bl	800025c <lcd_send_data>
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	2b00      	cmp	r3, #0
 800037a:	d1f4      	bne.n	8000366 <lcd_send_string+0xa>
}
 800037c:	bf00      	nop
 800037e:	bf00      	nop
 8000380:	3708      	adds	r7, #8
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
	...

08000388 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800038c:	f000 facc 	bl	8000928 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000390:	f000 f87a 	bl	8000488 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000394:	f000 f938 	bl	8000608 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000398:	f000 f8bc 	bl	8000514 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800039c:	f000 f90a 	bl	80005b4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 80003a0:	482e      	ldr	r0, [pc, #184]	; (800045c <main+0xd4>)
 80003a2:	f001 fa0c 	bl	80017be <HAL_TIM_Base_Start>

  lcd_init ();
 80003a6:	f7ff ff9c 	bl	80002e2 <lcd_init>
  lcd_put_cur(0, 0);
 80003aa:	2100      	movs	r1, #0
 80003ac:	2000      	movs	r0, #0
 80003ae:	f7ff ff79 	bl	80002a4 <lcd_put_cur>
  lcd_send_string("HELLO ");
 80003b2:	482b      	ldr	r0, [pc, #172]	; (8000460 <main+0xd8>)
 80003b4:	f7ff ffd2 	bl	800035c <lcd_send_string>
  lcd_send_string("WORLD ");
 80003b8:	482a      	ldr	r0, [pc, #168]	; (8000464 <main+0xdc>)
 80003ba:	f7ff ffcf 	bl	800035c <lcd_send_string>
  lcd_send_string("FROM");
 80003be:	482a      	ldr	r0, [pc, #168]	; (8000468 <main+0xe0>)
 80003c0:	f7ff ffcc 	bl	800035c <lcd_send_string>

  lcd_put_cur(1, 0);
 80003c4:	2100      	movs	r1, #0
 80003c6:	2001      	movs	r0, #1
 80003c8:	f7ff ff6c 	bl	80002a4 <lcd_put_cur>
  lcd_send_string("CONTROLLERS TECH");
 80003cc:	4827      	ldr	r0, [pc, #156]	; (800046c <main+0xe4>)
 80003ce:	f7ff ffc5 	bl	800035c <lcd_send_string>
  HAL_Delay(3000);
 80003d2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80003d6:	f000 fb09 	bl	80009ec <HAL_Delay>
  lcd_clear();
 80003da:	f7ff ff59 	bl	8000290 <lcd_clear>
		  if (row > 1) row=0;

		  HAL_Delay(250);
	  }*/

	 sprintf(msg2, "11");
 80003de:	4924      	ldr	r1, [pc, #144]	; (8000470 <main+0xe8>)
 80003e0:	4824      	ldr	r0, [pc, #144]	; (8000474 <main+0xec>)
 80003e2:	f001 fef1 	bl	80021c8 <siprintf>
	 bool_HAL=HAL_UART_Transmit(&huart1, (uint8_t*)msg2, strlen(msg2), 1000);
 80003e6:	4823      	ldr	r0, [pc, #140]	; (8000474 <main+0xec>)
 80003e8:	f7ff feb0 	bl	800014c <strlen>
 80003ec:	4603      	mov	r3, r0
 80003ee:	b29a      	uxth	r2, r3
 80003f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003f4:	491f      	ldr	r1, [pc, #124]	; (8000474 <main+0xec>)
 80003f6:	4820      	ldr	r0, [pc, #128]	; (8000478 <main+0xf0>)
 80003f8:	f001 fc51 	bl	8001c9e <HAL_UART_Transmit>
 80003fc:	4603      	mov	r3, r0
 80003fe:	461a      	mov	r2, r3
 8000400:	4b1e      	ldr	r3, [pc, #120]	; (800047c <main+0xf4>)
 8000402:	701a      	strb	r2, [r3, #0]

	 //bool_HAL=HAL_UART_Transmit(&huart1,msg2, 2, 1000);
	 HAL_Delay(100);
 8000404:	2064      	movs	r0, #100	; 0x64
 8000406:	f000 faf1 	bl	80009ec <HAL_Delay>
	 HAL_UART_Receive(&huart1,msg, 10, 1000);
 800040a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800040e:	220a      	movs	r2, #10
 8000410:	491b      	ldr	r1, [pc, #108]	; (8000480 <main+0xf8>)
 8000412:	4819      	ldr	r0, [pc, #100]	; (8000478 <main+0xf0>)
 8000414:	f001 fcdc 	bl	8001dd0 <HAL_UART_Receive>
	 sprintf(resp,msg);
 8000418:	4919      	ldr	r1, [pc, #100]	; (8000480 <main+0xf8>)
 800041a:	481a      	ldr	r0, [pc, #104]	; (8000484 <main+0xfc>)
 800041c:	f001 fed4 	bl	80021c8 <siprintf>
	 lcd_put_cur(0, 0);
 8000420:	2100      	movs	r1, #0
 8000422:	2000      	movs	r0, #0
 8000424:	f7ff ff3e 	bl	80002a4 <lcd_put_cur>
	 lcd_send_string(resp);
 8000428:	4816      	ldr	r0, [pc, #88]	; (8000484 <main+0xfc>)
 800042a:	f7ff ff97 	bl	800035c <lcd_send_string>
	 HAL_Delay(300);
 800042e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000432:	f000 fadb 	bl	80009ec <HAL_Delay>
	 lcd_clear();
 8000436:	f7ff ff2b 	bl	8000290 <lcd_clear>
	 default:
		 sprintf(msg,"la cagaste brodi");
		 break;
	 }*/

	  HAL_Delay(100);
 800043a:	2064      	movs	r0, #100	; 0x64
 800043c:	f000 fad6 	bl	80009ec <HAL_Delay>

	  lcd_put_cur(1, 0);
 8000440:	2100      	movs	r1, #0
 8000442:	2001      	movs	r0, #1
 8000444:	f7ff ff2e 	bl	80002a4 <lcd_put_cur>
	  lcd_send_string(msg2);
 8000448:	480a      	ldr	r0, [pc, #40]	; (8000474 <main+0xec>)
 800044a:	f7ff ff87 	bl	800035c <lcd_send_string>
	 // lcd_put_cur(1, 0);
	 // lcd_send_string(msg);
	  HAL_Delay(1000);
 800044e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000452:	f000 facb 	bl	80009ec <HAL_Delay>
	  lcd_clear();
 8000456:	f7ff ff1b 	bl	8000290 <lcd_clear>
	 sprintf(msg2, "11");
 800045a:	e7c0      	b.n	80003de <main+0x56>
 800045c:	200000ac 	.word	0x200000ac
 8000460:	08002ad4 	.word	0x08002ad4
 8000464:	08002adc 	.word	0x08002adc
 8000468:	08002ae4 	.word	0x08002ae4
 800046c:	08002aec 	.word	0x08002aec
 8000470:	08002b00 	.word	0x08002b00
 8000474:	20000098 	.word	0x20000098
 8000478:	200000f0 	.word	0x200000f0
 800047c:	200000ec 	.word	0x200000ec
 8000480:	2000008c 	.word	0x2000008c
 8000484:	2000009c 	.word	0x2000009c

08000488 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b090      	sub	sp, #64	; 0x40
 800048c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800048e:	f107 0318 	add.w	r3, r7, #24
 8000492:	2228      	movs	r2, #40	; 0x28
 8000494:	2100      	movs	r1, #0
 8000496:	4618      	mov	r0, r3
 8000498:	f001 fe8e 	bl	80021b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800049c:	1d3b      	adds	r3, r7, #4
 800049e:	2200      	movs	r2, #0
 80004a0:	601a      	str	r2, [r3, #0]
 80004a2:	605a      	str	r2, [r3, #4]
 80004a4:	609a      	str	r2, [r3, #8]
 80004a6:	60da      	str	r2, [r3, #12]
 80004a8:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004aa:	2301      	movs	r3, #1
 80004ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004b4:	2300      	movs	r3, #0
 80004b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004b8:	2301      	movs	r3, #1
 80004ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004bc:	2302      	movs	r3, #2
 80004be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004c6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80004ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004cc:	f107 0318 	add.w	r3, r7, #24
 80004d0:	4618      	mov	r0, r3
 80004d2:	f000 fd2f 	bl	8000f34 <HAL_RCC_OscConfig>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80004dc:	f000 f8d2 	bl	8000684 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004e0:	230f      	movs	r3, #15
 80004e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004e4:	2302      	movs	r3, #2
 80004e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004e8:	2300      	movs	r3, #0
 80004ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004f2:	2300      	movs	r3, #0
 80004f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	2102      	movs	r1, #2
 80004fa:	4618      	mov	r0, r3
 80004fc:	f000 ff9c 	bl	8001438 <HAL_RCC_ClockConfig>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000506:	f000 f8bd 	bl	8000684 <Error_Handler>
  }
}
 800050a:	bf00      	nop
 800050c:	3740      	adds	r7, #64	; 0x40
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
	...

08000514 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b086      	sub	sp, #24
 8000518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800051a:	f107 0308 	add.w	r3, r7, #8
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
 8000526:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000528:	463b      	mov	r3, r7
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000530:	4b1e      	ldr	r3, [pc, #120]	; (80005ac <MX_TIM1_Init+0x98>)
 8000532:	4a1f      	ldr	r2, [pc, #124]	; (80005b0 <MX_TIM1_Init+0x9c>)
 8000534:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000536:	4b1d      	ldr	r3, [pc, #116]	; (80005ac <MX_TIM1_Init+0x98>)
 8000538:	2247      	movs	r2, #71	; 0x47
 800053a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800053c:	4b1b      	ldr	r3, [pc, #108]	; (80005ac <MX_TIM1_Init+0x98>)
 800053e:	2200      	movs	r2, #0
 8000540:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000542:	4b1a      	ldr	r3, [pc, #104]	; (80005ac <MX_TIM1_Init+0x98>)
 8000544:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000548:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800054a:	4b18      	ldr	r3, [pc, #96]	; (80005ac <MX_TIM1_Init+0x98>)
 800054c:	2200      	movs	r2, #0
 800054e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000550:	4b16      	ldr	r3, [pc, #88]	; (80005ac <MX_TIM1_Init+0x98>)
 8000552:	2200      	movs	r2, #0
 8000554:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000556:	4b15      	ldr	r3, [pc, #84]	; (80005ac <MX_TIM1_Init+0x98>)
 8000558:	2200      	movs	r2, #0
 800055a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800055c:	4813      	ldr	r0, [pc, #76]	; (80005ac <MX_TIM1_Init+0x98>)
 800055e:	f001 f903 	bl	8001768 <HAL_TIM_Base_Init>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000568:	f000 f88c 	bl	8000684 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800056c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000570:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000572:	f107 0308 	add.w	r3, r7, #8
 8000576:	4619      	mov	r1, r3
 8000578:	480c      	ldr	r0, [pc, #48]	; (80005ac <MX_TIM1_Init+0x98>)
 800057a:	f001 f943 	bl	8001804 <HAL_TIM_ConfigClockSource>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000584:	f000 f87e 	bl	8000684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000588:	2300      	movs	r3, #0
 800058a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800058c:	2300      	movs	r3, #0
 800058e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000590:	463b      	mov	r3, r7
 8000592:	4619      	mov	r1, r3
 8000594:	4805      	ldr	r0, [pc, #20]	; (80005ac <MX_TIM1_Init+0x98>)
 8000596:	f001 faf1 	bl	8001b7c <HAL_TIMEx_MasterConfigSynchronization>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80005a0:	f000 f870 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80005a4:	bf00      	nop
 80005a6:	3718      	adds	r7, #24
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	200000ac 	.word	0x200000ac
 80005b0:	40012c00 	.word	0x40012c00

080005b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005b8:	4b11      	ldr	r3, [pc, #68]	; (8000600 <MX_USART1_UART_Init+0x4c>)
 80005ba:	4a12      	ldr	r2, [pc, #72]	; (8000604 <MX_USART1_UART_Init+0x50>)
 80005bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80005be:	4b10      	ldr	r3, [pc, #64]	; (8000600 <MX_USART1_UART_Init+0x4c>)
 80005c0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80005c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005c6:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <MX_USART1_UART_Init+0x4c>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005cc:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <MX_USART1_UART_Init+0x4c>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005d2:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <MX_USART1_UART_Init+0x4c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005d8:	4b09      	ldr	r3, [pc, #36]	; (8000600 <MX_USART1_UART_Init+0x4c>)
 80005da:	220c      	movs	r2, #12
 80005dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005de:	4b08      	ldr	r3, [pc, #32]	; (8000600 <MX_USART1_UART_Init+0x4c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <MX_USART1_UART_Init+0x4c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005ea:	4805      	ldr	r0, [pc, #20]	; (8000600 <MX_USART1_UART_Init+0x4c>)
 80005ec:	f001 fb0a 	bl	8001c04 <HAL_UART_Init>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005f6:	f000 f845 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	200000f0 	.word	0x200000f0
 8000604:	40013800 	.word	0x40013800

08000608 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060e:	f107 0308 	add.w	r3, r7, #8
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800061c:	4b17      	ldr	r3, [pc, #92]	; (800067c <MX_GPIO_Init+0x74>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	4a16      	ldr	r2, [pc, #88]	; (800067c <MX_GPIO_Init+0x74>)
 8000622:	f043 0320 	orr.w	r3, r3, #32
 8000626:	6193      	str	r3, [r2, #24]
 8000628:	4b14      	ldr	r3, [pc, #80]	; (800067c <MX_GPIO_Init+0x74>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	f003 0320 	and.w	r3, r3, #32
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000634:	4b11      	ldr	r3, [pc, #68]	; (800067c <MX_GPIO_Init+0x74>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	4a10      	ldr	r2, [pc, #64]	; (800067c <MX_GPIO_Init+0x74>)
 800063a:	f043 0304 	orr.w	r3, r3, #4
 800063e:	6193      	str	r3, [r2, #24]
 8000640:	4b0e      	ldr	r3, [pc, #56]	; (800067c <MX_GPIO_Init+0x74>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	f003 0304 	and.w	r3, r3, #4
 8000648:	603b      	str	r3, [r7, #0]
 800064a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800064c:	2200      	movs	r2, #0
 800064e:	21fe      	movs	r1, #254	; 0xfe
 8000650:	480b      	ldr	r0, [pc, #44]	; (8000680 <MX_GPIO_Init+0x78>)
 8000652:	f000 fc57 	bl	8000f04 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000656:	23fe      	movs	r3, #254	; 0xfe
 8000658:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065a:	2301      	movs	r3, #1
 800065c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	2300      	movs	r3, #0
 8000660:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000662:	2302      	movs	r3, #2
 8000664:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000666:	f107 0308 	add.w	r3, r7, #8
 800066a:	4619      	mov	r1, r3
 800066c:	4804      	ldr	r0, [pc, #16]	; (8000680 <MX_GPIO_Init+0x78>)
 800066e:	f000 fac5 	bl	8000bfc <HAL_GPIO_Init>

}
 8000672:	bf00      	nop
 8000674:	3718      	adds	r7, #24
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40021000 	.word	0x40021000
 8000680:	40010800 	.word	0x40010800

08000684 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000688:	bf00      	nop
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr

08000690 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000690:	b480      	push	{r7}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000696:	4b15      	ldr	r3, [pc, #84]	; (80006ec <HAL_MspInit+0x5c>)
 8000698:	699b      	ldr	r3, [r3, #24]
 800069a:	4a14      	ldr	r2, [pc, #80]	; (80006ec <HAL_MspInit+0x5c>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	6193      	str	r3, [r2, #24]
 80006a2:	4b12      	ldr	r3, [pc, #72]	; (80006ec <HAL_MspInit+0x5c>)
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ae:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <HAL_MspInit+0x5c>)
 80006b0:	69db      	ldr	r3, [r3, #28]
 80006b2:	4a0e      	ldr	r2, [pc, #56]	; (80006ec <HAL_MspInit+0x5c>)
 80006b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b8:	61d3      	str	r3, [r2, #28]
 80006ba:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <HAL_MspInit+0x5c>)
 80006bc:	69db      	ldr	r3, [r3, #28]
 80006be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006c6:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <HAL_MspInit+0x60>)
 80006c8:	685b      	ldr	r3, [r3, #4]
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	4a04      	ldr	r2, [pc, #16]	; (80006f0 <HAL_MspInit+0x60>)
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e2:	bf00      	nop
 80006e4:	3714      	adds	r7, #20
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr
 80006ec:	40021000 	.word	0x40021000
 80006f0:	40010000 	.word	0x40010000

080006f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b085      	sub	sp, #20
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a09      	ldr	r2, [pc, #36]	; (8000728 <HAL_TIM_Base_MspInit+0x34>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d10b      	bne.n	800071e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <HAL_TIM_Base_MspInit+0x38>)
 8000708:	699b      	ldr	r3, [r3, #24]
 800070a:	4a08      	ldr	r2, [pc, #32]	; (800072c <HAL_TIM_Base_MspInit+0x38>)
 800070c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000710:	6193      	str	r3, [r2, #24]
 8000712:	4b06      	ldr	r3, [pc, #24]	; (800072c <HAL_TIM_Base_MspInit+0x38>)
 8000714:	699b      	ldr	r3, [r3, #24]
 8000716:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800071e:	bf00      	nop
 8000720:	3714      	adds	r7, #20
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr
 8000728:	40012c00 	.word	0x40012c00
 800072c:	40021000 	.word	0x40021000

08000730 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b088      	sub	sp, #32
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000738:	f107 0310 	add.w	r3, r7, #16
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4a1c      	ldr	r2, [pc, #112]	; (80007bc <HAL_UART_MspInit+0x8c>)
 800074c:	4293      	cmp	r3, r2
 800074e:	d131      	bne.n	80007b4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000750:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <HAL_UART_MspInit+0x90>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	4a1a      	ldr	r2, [pc, #104]	; (80007c0 <HAL_UART_MspInit+0x90>)
 8000756:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800075a:	6193      	str	r3, [r2, #24]
 800075c:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <HAL_UART_MspInit+0x90>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000768:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <HAL_UART_MspInit+0x90>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	4a14      	ldr	r2, [pc, #80]	; (80007c0 <HAL_UART_MspInit+0x90>)
 800076e:	f043 0304 	orr.w	r3, r3, #4
 8000772:	6193      	str	r3, [r2, #24]
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <HAL_UART_MspInit+0x90>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	f003 0304 	and.w	r3, r3, #4
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000780:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000784:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000786:	2302      	movs	r3, #2
 8000788:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800078a:	2303      	movs	r3, #3
 800078c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078e:	f107 0310 	add.w	r3, r7, #16
 8000792:	4619      	mov	r1, r3
 8000794:	480b      	ldr	r0, [pc, #44]	; (80007c4 <HAL_UART_MspInit+0x94>)
 8000796:	f000 fa31 	bl	8000bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800079a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800079e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a8:	f107 0310 	add.w	r3, r7, #16
 80007ac:	4619      	mov	r1, r3
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <HAL_UART_MspInit+0x94>)
 80007b0:	f000 fa24 	bl	8000bfc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80007b4:	bf00      	nop
 80007b6:	3720      	adds	r7, #32
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40013800 	.word	0x40013800
 80007c0:	40021000 	.word	0x40021000
 80007c4:	40010800 	.word	0x40010800

080007c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr

080007d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <HardFault_Handler+0x4>

080007da <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007de:	e7fe      	b.n	80007de <MemManage_Handler+0x4>

080007e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <BusFault_Handler+0x4>

080007e6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007ea:	e7fe      	b.n	80007ea <UsageFault_Handler+0x4>

080007ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr

080007f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr

08000804 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr

08000810 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000814:	f000 f8ce 	bl	80009b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}

0800081c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000824:	4b11      	ldr	r3, [pc, #68]	; (800086c <_sbrk+0x50>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d102      	bne.n	8000832 <_sbrk+0x16>
		heap_end = &end;
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <_sbrk+0x50>)
 800082e:	4a10      	ldr	r2, [pc, #64]	; (8000870 <_sbrk+0x54>)
 8000830:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <_sbrk+0x50>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <_sbrk+0x50>)
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4413      	add	r3, r2
 8000840:	466a      	mov	r2, sp
 8000842:	4293      	cmp	r3, r2
 8000844:	d907      	bls.n	8000856 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000846:	f001 fc8d 	bl	8002164 <__errno>
 800084a:	4603      	mov	r3, r0
 800084c:	220c      	movs	r2, #12
 800084e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000850:	f04f 33ff 	mov.w	r3, #4294967295
 8000854:	e006      	b.n	8000864 <_sbrk+0x48>
	}

	heap_end += incr;
 8000856:	4b05      	ldr	r3, [pc, #20]	; (800086c <_sbrk+0x50>)
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	4413      	add	r3, r2
 800085e:	4a03      	ldr	r2, [pc, #12]	; (800086c <_sbrk+0x50>)
 8000860:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000862:	68fb      	ldr	r3, [r7, #12]
}
 8000864:	4618      	mov	r0, r3
 8000866:	3710      	adds	r7, #16
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000130 	.word	0x20000130
 8000870:	20000148 	.word	0x20000148

08000874 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000878:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <SystemInit+0x5c>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a14      	ldr	r2, [pc, #80]	; (80008d0 <SystemInit+0x5c>)
 800087e:	f043 0301 	orr.w	r3, r3, #1
 8000882:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000884:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <SystemInit+0x5c>)
 8000886:	685a      	ldr	r2, [r3, #4]
 8000888:	4911      	ldr	r1, [pc, #68]	; (80008d0 <SystemInit+0x5c>)
 800088a:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <SystemInit+0x60>)
 800088c:	4013      	ands	r3, r2
 800088e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000890:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <SystemInit+0x5c>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a0e      	ldr	r2, [pc, #56]	; (80008d0 <SystemInit+0x5c>)
 8000896:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800089a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800089e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80008a0:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <SystemInit+0x5c>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a0a      	ldr	r2, [pc, #40]	; (80008d0 <SystemInit+0x5c>)
 80008a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008aa:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80008ac:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <SystemInit+0x5c>)
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	4a07      	ldr	r2, [pc, #28]	; (80008d0 <SystemInit+0x5c>)
 80008b2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80008b6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80008b8:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <SystemInit+0x5c>)
 80008ba:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80008be:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80008c0:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <SystemInit+0x64>)
 80008c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008c6:	609a      	str	r2, [r3, #8]
#endif 
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr
 80008d0:	40021000 	.word	0x40021000
 80008d4:	f8ff0000 	.word	0xf8ff0000
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80008dc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80008de:	e003      	b.n	80008e8 <LoopCopyDataInit>

080008e0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80008e0:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80008e2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80008e4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80008e6:	3104      	adds	r1, #4

080008e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80008e8:	480a      	ldr	r0, [pc, #40]	; (8000914 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80008ec:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80008ee:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80008f0:	d3f6      	bcc.n	80008e0 <CopyDataInit>
  ldr r2, =_sbss
 80008f2:	4a0a      	ldr	r2, [pc, #40]	; (800091c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80008f4:	e002      	b.n	80008fc <LoopFillZerobss>

080008f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80008f6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80008f8:	f842 3b04 	str.w	r3, [r2], #4

080008fc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80008fc:	4b08      	ldr	r3, [pc, #32]	; (8000920 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80008fe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000900:	d3f9      	bcc.n	80008f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000902:	f7ff ffb7 	bl	8000874 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000906:	f001 fc33 	bl	8002170 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800090a:	f7ff fd3d 	bl	8000388 <main>
  bx lr
 800090e:	4770      	bx	lr
  ldr r3, =_sidata
 8000910:	08002b68 	.word	0x08002b68
  ldr r0, =_sdata
 8000914:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000918:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 800091c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000920:	20000148 	.word	0x20000148

08000924 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000924:	e7fe      	b.n	8000924 <ADC1_2_IRQHandler>
	...

08000928 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800092c:	4b08      	ldr	r3, [pc, #32]	; (8000950 <HAL_Init+0x28>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a07      	ldr	r2, [pc, #28]	; (8000950 <HAL_Init+0x28>)
 8000932:	f043 0310 	orr.w	r3, r3, #16
 8000936:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000938:	2003      	movs	r0, #3
 800093a:	f000 f92b 	bl	8000b94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800093e:	2000      	movs	r0, #0
 8000940:	f000 f808 	bl	8000954 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000944:	f7ff fea4 	bl	8000690 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000948:	2300      	movs	r3, #0
}
 800094a:	4618      	mov	r0, r3
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40022000 	.word	0x40022000

08000954 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800095c:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <HAL_InitTick+0x54>)
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <HAL_InitTick+0x58>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	4619      	mov	r1, r3
 8000966:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800096a:	fbb3 f3f1 	udiv	r3, r3, r1
 800096e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000972:	4618      	mov	r0, r3
 8000974:	f000 f935 	bl	8000be2 <HAL_SYSTICK_Config>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800097e:	2301      	movs	r3, #1
 8000980:	e00e      	b.n	80009a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2b0f      	cmp	r3, #15
 8000986:	d80a      	bhi.n	800099e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000988:	2200      	movs	r2, #0
 800098a:	6879      	ldr	r1, [r7, #4]
 800098c:	f04f 30ff 	mov.w	r0, #4294967295
 8000990:	f000 f90b 	bl	8000baa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000994:	4a06      	ldr	r2, [pc, #24]	; (80009b0 <HAL_InitTick+0x5c>)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800099a:	2300      	movs	r3, #0
 800099c:	e000      	b.n	80009a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800099e:	2301      	movs	r3, #1
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20000000 	.word	0x20000000
 80009ac:	20000008 	.word	0x20000008
 80009b0:	20000004 	.word	0x20000004

080009b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009b8:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <HAL_IncTick+0x1c>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	461a      	mov	r2, r3
 80009be:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <HAL_IncTick+0x20>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4413      	add	r3, r2
 80009c4:	4a03      	ldr	r2, [pc, #12]	; (80009d4 <HAL_IncTick+0x20>)
 80009c6:	6013      	str	r3, [r2, #0]
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr
 80009d0:	20000008 	.word	0x20000008
 80009d4:	20000134 	.word	0x20000134

080009d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  return uwTick;
 80009dc:	4b02      	ldr	r3, [pc, #8]	; (80009e8 <HAL_GetTick+0x10>)
 80009de:	681b      	ldr	r3, [r3, #0]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr
 80009e8:	20000134 	.word	0x20000134

080009ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009f4:	f7ff fff0 	bl	80009d8 <HAL_GetTick>
 80009f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a04:	d005      	beq.n	8000a12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a06:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <HAL_Delay+0x44>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	4413      	add	r3, r2
 8000a10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a12:	bf00      	nop
 8000a14:	f7ff ffe0 	bl	80009d8 <HAL_GetTick>
 8000a18:	4602      	mov	r2, r0
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	68fa      	ldr	r2, [r7, #12]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d8f7      	bhi.n	8000a14 <HAL_Delay+0x28>
  {
  }
}
 8000a24:	bf00      	nop
 8000a26:	bf00      	nop
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000008 	.word	0x20000008

08000a34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b085      	sub	sp, #20
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f003 0307 	and.w	r3, r3, #7
 8000a42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a44:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <__NVIC_SetPriorityGrouping+0x44>)
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a4a:	68ba      	ldr	r2, [r7, #8]
 8000a4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a50:	4013      	ands	r3, r2
 8000a52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a66:	4a04      	ldr	r2, [pc, #16]	; (8000a78 <__NVIC_SetPriorityGrouping+0x44>)
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	60d3      	str	r3, [r2, #12]
}
 8000a6c:	bf00      	nop
 8000a6e:	3714      	adds	r7, #20
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a80:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <__NVIC_GetPriorityGrouping+0x18>)
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	0a1b      	lsrs	r3, r3, #8
 8000a86:	f003 0307 	and.w	r3, r3, #7
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bc80      	pop	{r7}
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	6039      	str	r1, [r7, #0]
 8000aa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	db0a      	blt.n	8000ac2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	490c      	ldr	r1, [pc, #48]	; (8000ae4 <__NVIC_SetPriority+0x4c>)
 8000ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab6:	0112      	lsls	r2, r2, #4
 8000ab8:	b2d2      	uxtb	r2, r2
 8000aba:	440b      	add	r3, r1
 8000abc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ac0:	e00a      	b.n	8000ad8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	b2da      	uxtb	r2, r3
 8000ac6:	4908      	ldr	r1, [pc, #32]	; (8000ae8 <__NVIC_SetPriority+0x50>)
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	f003 030f 	and.w	r3, r3, #15
 8000ace:	3b04      	subs	r3, #4
 8000ad0:	0112      	lsls	r2, r2, #4
 8000ad2:	b2d2      	uxtb	r2, r2
 8000ad4:	440b      	add	r3, r1
 8000ad6:	761a      	strb	r2, [r3, #24]
}
 8000ad8:	bf00      	nop
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bc80      	pop	{r7}
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	e000e100 	.word	0xe000e100
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b089      	sub	sp, #36	; 0x24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	f003 0307 	and.w	r3, r3, #7
 8000afe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b00:	69fb      	ldr	r3, [r7, #28]
 8000b02:	f1c3 0307 	rsb	r3, r3, #7
 8000b06:	2b04      	cmp	r3, #4
 8000b08:	bf28      	it	cs
 8000b0a:	2304      	movcs	r3, #4
 8000b0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	3304      	adds	r3, #4
 8000b12:	2b06      	cmp	r3, #6
 8000b14:	d902      	bls.n	8000b1c <NVIC_EncodePriority+0x30>
 8000b16:	69fb      	ldr	r3, [r7, #28]
 8000b18:	3b03      	subs	r3, #3
 8000b1a:	e000      	b.n	8000b1e <NVIC_EncodePriority+0x32>
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b20:	f04f 32ff 	mov.w	r2, #4294967295
 8000b24:	69bb      	ldr	r3, [r7, #24]
 8000b26:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2a:	43da      	mvns	r2, r3
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	401a      	ands	r2, r3
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b34:	f04f 31ff 	mov.w	r1, #4294967295
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3e:	43d9      	mvns	r1, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b44:	4313      	orrs	r3, r2
         );
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3724      	adds	r7, #36	; 0x24
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr

08000b50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b60:	d301      	bcc.n	8000b66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b62:	2301      	movs	r3, #1
 8000b64:	e00f      	b.n	8000b86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b66:	4a0a      	ldr	r2, [pc, #40]	; (8000b90 <SysTick_Config+0x40>)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b6e:	210f      	movs	r1, #15
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295
 8000b74:	f7ff ff90 	bl	8000a98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b78:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <SysTick_Config+0x40>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b7e:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <SysTick_Config+0x40>)
 8000b80:	2207      	movs	r2, #7
 8000b82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	e000e010 	.word	0xe000e010

08000b94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f7ff ff49 	bl	8000a34 <__NVIC_SetPriorityGrouping>
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b086      	sub	sp, #24
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	60b9      	str	r1, [r7, #8]
 8000bb4:	607a      	str	r2, [r7, #4]
 8000bb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bbc:	f7ff ff5e 	bl	8000a7c <__NVIC_GetPriorityGrouping>
 8000bc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	68b9      	ldr	r1, [r7, #8]
 8000bc6:	6978      	ldr	r0, [r7, #20]
 8000bc8:	f7ff ff90 	bl	8000aec <NVIC_EncodePriority>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bd2:	4611      	mov	r1, r2
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff ff5f 	bl	8000a98 <__NVIC_SetPriority>
}
 8000bda:	bf00      	nop
 8000bdc:	3718      	adds	r7, #24
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b082      	sub	sp, #8
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f7ff ffb0 	bl	8000b50 <SysTick_Config>
 8000bf0:	4603      	mov	r3, r0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b08b      	sub	sp, #44	; 0x2c
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c06:	2300      	movs	r3, #0
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c0e:	e169      	b.n	8000ee4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c10:	2201      	movs	r2, #1
 8000c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	69fa      	ldr	r2, [r7, #28]
 8000c20:	4013      	ands	r3, r2
 8000c22:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c24:	69ba      	ldr	r2, [r7, #24]
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	f040 8158 	bne.w	8000ede <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	4a9a      	ldr	r2, [pc, #616]	; (8000e9c <HAL_GPIO_Init+0x2a0>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d05e      	beq.n	8000cf6 <HAL_GPIO_Init+0xfa>
 8000c38:	4a98      	ldr	r2, [pc, #608]	; (8000e9c <HAL_GPIO_Init+0x2a0>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d875      	bhi.n	8000d2a <HAL_GPIO_Init+0x12e>
 8000c3e:	4a98      	ldr	r2, [pc, #608]	; (8000ea0 <HAL_GPIO_Init+0x2a4>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d058      	beq.n	8000cf6 <HAL_GPIO_Init+0xfa>
 8000c44:	4a96      	ldr	r2, [pc, #600]	; (8000ea0 <HAL_GPIO_Init+0x2a4>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d86f      	bhi.n	8000d2a <HAL_GPIO_Init+0x12e>
 8000c4a:	4a96      	ldr	r2, [pc, #600]	; (8000ea4 <HAL_GPIO_Init+0x2a8>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d052      	beq.n	8000cf6 <HAL_GPIO_Init+0xfa>
 8000c50:	4a94      	ldr	r2, [pc, #592]	; (8000ea4 <HAL_GPIO_Init+0x2a8>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d869      	bhi.n	8000d2a <HAL_GPIO_Init+0x12e>
 8000c56:	4a94      	ldr	r2, [pc, #592]	; (8000ea8 <HAL_GPIO_Init+0x2ac>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d04c      	beq.n	8000cf6 <HAL_GPIO_Init+0xfa>
 8000c5c:	4a92      	ldr	r2, [pc, #584]	; (8000ea8 <HAL_GPIO_Init+0x2ac>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d863      	bhi.n	8000d2a <HAL_GPIO_Init+0x12e>
 8000c62:	4a92      	ldr	r2, [pc, #584]	; (8000eac <HAL_GPIO_Init+0x2b0>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d046      	beq.n	8000cf6 <HAL_GPIO_Init+0xfa>
 8000c68:	4a90      	ldr	r2, [pc, #576]	; (8000eac <HAL_GPIO_Init+0x2b0>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d85d      	bhi.n	8000d2a <HAL_GPIO_Init+0x12e>
 8000c6e:	2b12      	cmp	r3, #18
 8000c70:	d82a      	bhi.n	8000cc8 <HAL_GPIO_Init+0xcc>
 8000c72:	2b12      	cmp	r3, #18
 8000c74:	d859      	bhi.n	8000d2a <HAL_GPIO_Init+0x12e>
 8000c76:	a201      	add	r2, pc, #4	; (adr r2, 8000c7c <HAL_GPIO_Init+0x80>)
 8000c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c7c:	08000cf7 	.word	0x08000cf7
 8000c80:	08000cd1 	.word	0x08000cd1
 8000c84:	08000ce3 	.word	0x08000ce3
 8000c88:	08000d25 	.word	0x08000d25
 8000c8c:	08000d2b 	.word	0x08000d2b
 8000c90:	08000d2b 	.word	0x08000d2b
 8000c94:	08000d2b 	.word	0x08000d2b
 8000c98:	08000d2b 	.word	0x08000d2b
 8000c9c:	08000d2b 	.word	0x08000d2b
 8000ca0:	08000d2b 	.word	0x08000d2b
 8000ca4:	08000d2b 	.word	0x08000d2b
 8000ca8:	08000d2b 	.word	0x08000d2b
 8000cac:	08000d2b 	.word	0x08000d2b
 8000cb0:	08000d2b 	.word	0x08000d2b
 8000cb4:	08000d2b 	.word	0x08000d2b
 8000cb8:	08000d2b 	.word	0x08000d2b
 8000cbc:	08000d2b 	.word	0x08000d2b
 8000cc0:	08000cd9 	.word	0x08000cd9
 8000cc4:	08000ced 	.word	0x08000ced
 8000cc8:	4a79      	ldr	r2, [pc, #484]	; (8000eb0 <HAL_GPIO_Init+0x2b4>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d013      	beq.n	8000cf6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cce:	e02c      	b.n	8000d2a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	623b      	str	r3, [r7, #32]
          break;
 8000cd6:	e029      	b.n	8000d2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	3304      	adds	r3, #4
 8000cde:	623b      	str	r3, [r7, #32]
          break;
 8000ce0:	e024      	b.n	8000d2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	68db      	ldr	r3, [r3, #12]
 8000ce6:	3308      	adds	r3, #8
 8000ce8:	623b      	str	r3, [r7, #32]
          break;
 8000cea:	e01f      	b.n	8000d2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	330c      	adds	r3, #12
 8000cf2:	623b      	str	r3, [r7, #32]
          break;
 8000cf4:	e01a      	b.n	8000d2c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d102      	bne.n	8000d04 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cfe:	2304      	movs	r3, #4
 8000d00:	623b      	str	r3, [r7, #32]
          break;
 8000d02:	e013      	b.n	8000d2c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d105      	bne.n	8000d18 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d0c:	2308      	movs	r3, #8
 8000d0e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	69fa      	ldr	r2, [r7, #28]
 8000d14:	611a      	str	r2, [r3, #16]
          break;
 8000d16:	e009      	b.n	8000d2c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d18:	2308      	movs	r3, #8
 8000d1a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	69fa      	ldr	r2, [r7, #28]
 8000d20:	615a      	str	r2, [r3, #20]
          break;
 8000d22:	e003      	b.n	8000d2c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d24:	2300      	movs	r3, #0
 8000d26:	623b      	str	r3, [r7, #32]
          break;
 8000d28:	e000      	b.n	8000d2c <HAL_GPIO_Init+0x130>
          break;
 8000d2a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	2bff      	cmp	r3, #255	; 0xff
 8000d30:	d801      	bhi.n	8000d36 <HAL_GPIO_Init+0x13a>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	e001      	b.n	8000d3a <HAL_GPIO_Init+0x13e>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	3304      	adds	r3, #4
 8000d3a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	2bff      	cmp	r3, #255	; 0xff
 8000d40:	d802      	bhi.n	8000d48 <HAL_GPIO_Init+0x14c>
 8000d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	e002      	b.n	8000d4e <HAL_GPIO_Init+0x152>
 8000d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4a:	3b08      	subs	r3, #8
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	210f      	movs	r1, #15
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	401a      	ands	r2, r3
 8000d60:	6a39      	ldr	r1, [r7, #32]
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	fa01 f303 	lsl.w	r3, r1, r3
 8000d68:	431a      	orrs	r2, r3
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	f000 80b1 	beq.w	8000ede <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d7c:	4b4d      	ldr	r3, [pc, #308]	; (8000eb4 <HAL_GPIO_Init+0x2b8>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	4a4c      	ldr	r2, [pc, #304]	; (8000eb4 <HAL_GPIO_Init+0x2b8>)
 8000d82:	f043 0301 	orr.w	r3, r3, #1
 8000d86:	6193      	str	r3, [r2, #24]
 8000d88:	4b4a      	ldr	r3, [pc, #296]	; (8000eb4 <HAL_GPIO_Init+0x2b8>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	f003 0301 	and.w	r3, r3, #1
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d94:	4a48      	ldr	r2, [pc, #288]	; (8000eb8 <HAL_GPIO_Init+0x2bc>)
 8000d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d98:	089b      	lsrs	r3, r3, #2
 8000d9a:	3302      	adds	r3, #2
 8000d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da4:	f003 0303 	and.w	r3, r3, #3
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	220f      	movs	r2, #15
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	68fa      	ldr	r2, [r7, #12]
 8000db4:	4013      	ands	r3, r2
 8000db6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4a40      	ldr	r2, [pc, #256]	; (8000ebc <HAL_GPIO_Init+0x2c0>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d013      	beq.n	8000de8 <HAL_GPIO_Init+0x1ec>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4a3f      	ldr	r2, [pc, #252]	; (8000ec0 <HAL_GPIO_Init+0x2c4>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d00d      	beq.n	8000de4 <HAL_GPIO_Init+0x1e8>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4a3e      	ldr	r2, [pc, #248]	; (8000ec4 <HAL_GPIO_Init+0x2c8>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d007      	beq.n	8000de0 <HAL_GPIO_Init+0x1e4>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4a3d      	ldr	r2, [pc, #244]	; (8000ec8 <HAL_GPIO_Init+0x2cc>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d101      	bne.n	8000ddc <HAL_GPIO_Init+0x1e0>
 8000dd8:	2303      	movs	r3, #3
 8000dda:	e006      	b.n	8000dea <HAL_GPIO_Init+0x1ee>
 8000ddc:	2304      	movs	r3, #4
 8000dde:	e004      	b.n	8000dea <HAL_GPIO_Init+0x1ee>
 8000de0:	2302      	movs	r3, #2
 8000de2:	e002      	b.n	8000dea <HAL_GPIO_Init+0x1ee>
 8000de4:	2301      	movs	r3, #1
 8000de6:	e000      	b.n	8000dea <HAL_GPIO_Init+0x1ee>
 8000de8:	2300      	movs	r3, #0
 8000dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dec:	f002 0203 	and.w	r2, r2, #3
 8000df0:	0092      	lsls	r2, r2, #2
 8000df2:	4093      	lsls	r3, r2
 8000df4:	68fa      	ldr	r2, [r7, #12]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000dfa:	492f      	ldr	r1, [pc, #188]	; (8000eb8 <HAL_GPIO_Init+0x2bc>)
 8000dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfe:	089b      	lsrs	r3, r3, #2
 8000e00:	3302      	adds	r3, #2
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d006      	beq.n	8000e22 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e14:	4b2d      	ldr	r3, [pc, #180]	; (8000ecc <HAL_GPIO_Init+0x2d0>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	492c      	ldr	r1, [pc, #176]	; (8000ecc <HAL_GPIO_Init+0x2d0>)
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	600b      	str	r3, [r1, #0]
 8000e20:	e006      	b.n	8000e30 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e22:	4b2a      	ldr	r3, [pc, #168]	; (8000ecc <HAL_GPIO_Init+0x2d0>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	4928      	ldr	r1, [pc, #160]	; (8000ecc <HAL_GPIO_Init+0x2d0>)
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d006      	beq.n	8000e4a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e3c:	4b23      	ldr	r3, [pc, #140]	; (8000ecc <HAL_GPIO_Init+0x2d0>)
 8000e3e:	685a      	ldr	r2, [r3, #4]
 8000e40:	4922      	ldr	r1, [pc, #136]	; (8000ecc <HAL_GPIO_Init+0x2d0>)
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	604b      	str	r3, [r1, #4]
 8000e48:	e006      	b.n	8000e58 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e4a:	4b20      	ldr	r3, [pc, #128]	; (8000ecc <HAL_GPIO_Init+0x2d0>)
 8000e4c:	685a      	ldr	r2, [r3, #4]
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	43db      	mvns	r3, r3
 8000e52:	491e      	ldr	r1, [pc, #120]	; (8000ecc <HAL_GPIO_Init+0x2d0>)
 8000e54:	4013      	ands	r3, r2
 8000e56:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d006      	beq.n	8000e72 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e64:	4b19      	ldr	r3, [pc, #100]	; (8000ecc <HAL_GPIO_Init+0x2d0>)
 8000e66:	689a      	ldr	r2, [r3, #8]
 8000e68:	4918      	ldr	r1, [pc, #96]	; (8000ecc <HAL_GPIO_Init+0x2d0>)
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	608b      	str	r3, [r1, #8]
 8000e70:	e006      	b.n	8000e80 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e72:	4b16      	ldr	r3, [pc, #88]	; (8000ecc <HAL_GPIO_Init+0x2d0>)
 8000e74:	689a      	ldr	r2, [r3, #8]
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	4914      	ldr	r1, [pc, #80]	; (8000ecc <HAL_GPIO_Init+0x2d0>)
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d021      	beq.n	8000ed0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <HAL_GPIO_Init+0x2d0>)
 8000e8e:	68da      	ldr	r2, [r3, #12]
 8000e90:	490e      	ldr	r1, [pc, #56]	; (8000ecc <HAL_GPIO_Init+0x2d0>)
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	60cb      	str	r3, [r1, #12]
 8000e98:	e021      	b.n	8000ede <HAL_GPIO_Init+0x2e2>
 8000e9a:	bf00      	nop
 8000e9c:	10320000 	.word	0x10320000
 8000ea0:	10310000 	.word	0x10310000
 8000ea4:	10220000 	.word	0x10220000
 8000ea8:	10210000 	.word	0x10210000
 8000eac:	10120000 	.word	0x10120000
 8000eb0:	10110000 	.word	0x10110000
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	40010000 	.word	0x40010000
 8000ebc:	40010800 	.word	0x40010800
 8000ec0:	40010c00 	.word	0x40010c00
 8000ec4:	40011000 	.word	0x40011000
 8000ec8:	40011400 	.word	0x40011400
 8000ecc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ed0:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <HAL_GPIO_Init+0x304>)
 8000ed2:	68da      	ldr	r2, [r3, #12]
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	4909      	ldr	r1, [pc, #36]	; (8000f00 <HAL_GPIO_Init+0x304>)
 8000eda:	4013      	ands	r3, r2
 8000edc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eea:	fa22 f303 	lsr.w	r3, r2, r3
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	f47f ae8e 	bne.w	8000c10 <HAL_GPIO_Init+0x14>
  }
}
 8000ef4:	bf00      	nop
 8000ef6:	bf00      	nop
 8000ef8:	372c      	adds	r7, #44	; 0x2c
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr
 8000f00:	40010400 	.word	0x40010400

08000f04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	807b      	strh	r3, [r7, #2]
 8000f10:	4613      	mov	r3, r2
 8000f12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f14:	787b      	ldrb	r3, [r7, #1]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d003      	beq.n	8000f22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f1a:	887a      	ldrh	r2, [r7, #2]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f20:	e003      	b.n	8000f2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f22:	887b      	ldrh	r3, [r7, #2]
 8000f24:	041a      	lsls	r2, r3, #16
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	611a      	str	r2, [r3, #16]
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr

08000f34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d101      	bne.n	8000f46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e272      	b.n	800142c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	f000 8087 	beq.w	8001062 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f54:	4b92      	ldr	r3, [pc, #584]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 030c 	and.w	r3, r3, #12
 8000f5c:	2b04      	cmp	r3, #4
 8000f5e:	d00c      	beq.n	8000f7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f60:	4b8f      	ldr	r3, [pc, #572]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f003 030c 	and.w	r3, r3, #12
 8000f68:	2b08      	cmp	r3, #8
 8000f6a:	d112      	bne.n	8000f92 <HAL_RCC_OscConfig+0x5e>
 8000f6c:	4b8c      	ldr	r3, [pc, #560]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f78:	d10b      	bne.n	8000f92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f7a:	4b89      	ldr	r3, [pc, #548]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d06c      	beq.n	8001060 <HAL_RCC_OscConfig+0x12c>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d168      	bne.n	8001060 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e24c      	b.n	800142c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f9a:	d106      	bne.n	8000faa <HAL_RCC_OscConfig+0x76>
 8000f9c:	4b80      	ldr	r3, [pc, #512]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a7f      	ldr	r2, [pc, #508]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8000fa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fa6:	6013      	str	r3, [r2, #0]
 8000fa8:	e02e      	b.n	8001008 <HAL_RCC_OscConfig+0xd4>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d10c      	bne.n	8000fcc <HAL_RCC_OscConfig+0x98>
 8000fb2:	4b7b      	ldr	r3, [pc, #492]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a7a      	ldr	r2, [pc, #488]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8000fb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fbc:	6013      	str	r3, [r2, #0]
 8000fbe:	4b78      	ldr	r3, [pc, #480]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a77      	ldr	r2, [pc, #476]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8000fc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fc8:	6013      	str	r3, [r2, #0]
 8000fca:	e01d      	b.n	8001008 <HAL_RCC_OscConfig+0xd4>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fd4:	d10c      	bne.n	8000ff0 <HAL_RCC_OscConfig+0xbc>
 8000fd6:	4b72      	ldr	r3, [pc, #456]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a71      	ldr	r2, [pc, #452]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8000fdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fe0:	6013      	str	r3, [r2, #0]
 8000fe2:	4b6f      	ldr	r3, [pc, #444]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a6e      	ldr	r2, [pc, #440]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8000fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fec:	6013      	str	r3, [r2, #0]
 8000fee:	e00b      	b.n	8001008 <HAL_RCC_OscConfig+0xd4>
 8000ff0:	4b6b      	ldr	r3, [pc, #428]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a6a      	ldr	r2, [pc, #424]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8000ff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ffa:	6013      	str	r3, [r2, #0]
 8000ffc:	4b68      	ldr	r3, [pc, #416]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a67      	ldr	r2, [pc, #412]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8001002:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001006:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d013      	beq.n	8001038 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001010:	f7ff fce2 	bl	80009d8 <HAL_GetTick>
 8001014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001016:	e008      	b.n	800102a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001018:	f7ff fcde 	bl	80009d8 <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	2b64      	cmp	r3, #100	; 0x64
 8001024:	d901      	bls.n	800102a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001026:	2303      	movs	r3, #3
 8001028:	e200      	b.n	800142c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800102a:	4b5d      	ldr	r3, [pc, #372]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d0f0      	beq.n	8001018 <HAL_RCC_OscConfig+0xe4>
 8001036:	e014      	b.n	8001062 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001038:	f7ff fcce 	bl	80009d8 <HAL_GetTick>
 800103c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800103e:	e008      	b.n	8001052 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001040:	f7ff fcca 	bl	80009d8 <HAL_GetTick>
 8001044:	4602      	mov	r2, r0
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	2b64      	cmp	r3, #100	; 0x64
 800104c:	d901      	bls.n	8001052 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800104e:	2303      	movs	r3, #3
 8001050:	e1ec      	b.n	800142c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001052:	4b53      	ldr	r3, [pc, #332]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d1f0      	bne.n	8001040 <HAL_RCC_OscConfig+0x10c>
 800105e:	e000      	b.n	8001062 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001060:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	2b00      	cmp	r3, #0
 800106c:	d063      	beq.n	8001136 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800106e:	4b4c      	ldr	r3, [pc, #304]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f003 030c 	and.w	r3, r3, #12
 8001076:	2b00      	cmp	r3, #0
 8001078:	d00b      	beq.n	8001092 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800107a:	4b49      	ldr	r3, [pc, #292]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f003 030c 	and.w	r3, r3, #12
 8001082:	2b08      	cmp	r3, #8
 8001084:	d11c      	bne.n	80010c0 <HAL_RCC_OscConfig+0x18c>
 8001086:	4b46      	ldr	r3, [pc, #280]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d116      	bne.n	80010c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001092:	4b43      	ldr	r3, [pc, #268]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d005      	beq.n	80010aa <HAL_RCC_OscConfig+0x176>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	691b      	ldr	r3, [r3, #16]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d001      	beq.n	80010aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e1c0      	b.n	800142c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010aa:	4b3d      	ldr	r3, [pc, #244]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	4939      	ldr	r1, [pc, #228]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 80010ba:	4313      	orrs	r3, r2
 80010bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010be:	e03a      	b.n	8001136 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	691b      	ldr	r3, [r3, #16]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d020      	beq.n	800110a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010c8:	4b36      	ldr	r3, [pc, #216]	; (80011a4 <HAL_RCC_OscConfig+0x270>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ce:	f7ff fc83 	bl	80009d8 <HAL_GetTick>
 80010d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d4:	e008      	b.n	80010e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010d6:	f7ff fc7f 	bl	80009d8 <HAL_GetTick>
 80010da:	4602      	mov	r2, r0
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d901      	bls.n	80010e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010e4:	2303      	movs	r3, #3
 80010e6:	e1a1      	b.n	800142c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010e8:	4b2d      	ldr	r3, [pc, #180]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 0302 	and.w	r3, r3, #2
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d0f0      	beq.n	80010d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010f4:	4b2a      	ldr	r3, [pc, #168]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	695b      	ldr	r3, [r3, #20]
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	4927      	ldr	r1, [pc, #156]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8001104:	4313      	orrs	r3, r2
 8001106:	600b      	str	r3, [r1, #0]
 8001108:	e015      	b.n	8001136 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800110a:	4b26      	ldr	r3, [pc, #152]	; (80011a4 <HAL_RCC_OscConfig+0x270>)
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001110:	f7ff fc62 	bl	80009d8 <HAL_GetTick>
 8001114:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001116:	e008      	b.n	800112a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001118:	f7ff fc5e 	bl	80009d8 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b02      	cmp	r3, #2
 8001124:	d901      	bls.n	800112a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	e180      	b.n	800142c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800112a:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	2b00      	cmp	r3, #0
 8001134:	d1f0      	bne.n	8001118 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0308 	and.w	r3, r3, #8
 800113e:	2b00      	cmp	r3, #0
 8001140:	d03a      	beq.n	80011b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	699b      	ldr	r3, [r3, #24]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d019      	beq.n	800117e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800114a:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <HAL_RCC_OscConfig+0x274>)
 800114c:	2201      	movs	r2, #1
 800114e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001150:	f7ff fc42 	bl	80009d8 <HAL_GetTick>
 8001154:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001158:	f7ff fc3e 	bl	80009d8 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b02      	cmp	r3, #2
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e160      	b.n	800142c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800116a:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 800116c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d0f0      	beq.n	8001158 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001176:	2001      	movs	r0, #1
 8001178:	f000 fad8 	bl	800172c <RCC_Delay>
 800117c:	e01c      	b.n	80011b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800117e:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <HAL_RCC_OscConfig+0x274>)
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001184:	f7ff fc28 	bl	80009d8 <HAL_GetTick>
 8001188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800118a:	e00f      	b.n	80011ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800118c:	f7ff fc24 	bl	80009d8 <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b02      	cmp	r3, #2
 8001198:	d908      	bls.n	80011ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e146      	b.n	800142c <HAL_RCC_OscConfig+0x4f8>
 800119e:	bf00      	nop
 80011a0:	40021000 	.word	0x40021000
 80011a4:	42420000 	.word	0x42420000
 80011a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011ac:	4b92      	ldr	r3, [pc, #584]	; (80013f8 <HAL_RCC_OscConfig+0x4c4>)
 80011ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b0:	f003 0302 	and.w	r3, r3, #2
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d1e9      	bne.n	800118c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0304 	and.w	r3, r3, #4
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	f000 80a6 	beq.w	8001312 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011c6:	2300      	movs	r3, #0
 80011c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011ca:	4b8b      	ldr	r3, [pc, #556]	; (80013f8 <HAL_RCC_OscConfig+0x4c4>)
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d10d      	bne.n	80011f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011d6:	4b88      	ldr	r3, [pc, #544]	; (80013f8 <HAL_RCC_OscConfig+0x4c4>)
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	4a87      	ldr	r2, [pc, #540]	; (80013f8 <HAL_RCC_OscConfig+0x4c4>)
 80011dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e0:	61d3      	str	r3, [r2, #28]
 80011e2:	4b85      	ldr	r3, [pc, #532]	; (80013f8 <HAL_RCC_OscConfig+0x4c4>)
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011ee:	2301      	movs	r3, #1
 80011f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f2:	4b82      	ldr	r3, [pc, #520]	; (80013fc <HAL_RCC_OscConfig+0x4c8>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d118      	bne.n	8001230 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011fe:	4b7f      	ldr	r3, [pc, #508]	; (80013fc <HAL_RCC_OscConfig+0x4c8>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a7e      	ldr	r2, [pc, #504]	; (80013fc <HAL_RCC_OscConfig+0x4c8>)
 8001204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001208:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800120a:	f7ff fbe5 	bl	80009d8 <HAL_GetTick>
 800120e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001210:	e008      	b.n	8001224 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001212:	f7ff fbe1 	bl	80009d8 <HAL_GetTick>
 8001216:	4602      	mov	r2, r0
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	2b64      	cmp	r3, #100	; 0x64
 800121e:	d901      	bls.n	8001224 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001220:	2303      	movs	r3, #3
 8001222:	e103      	b.n	800142c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001224:	4b75      	ldr	r3, [pc, #468]	; (80013fc <HAL_RCC_OscConfig+0x4c8>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800122c:	2b00      	cmp	r3, #0
 800122e:	d0f0      	beq.n	8001212 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d106      	bne.n	8001246 <HAL_RCC_OscConfig+0x312>
 8001238:	4b6f      	ldr	r3, [pc, #444]	; (80013f8 <HAL_RCC_OscConfig+0x4c4>)
 800123a:	6a1b      	ldr	r3, [r3, #32]
 800123c:	4a6e      	ldr	r2, [pc, #440]	; (80013f8 <HAL_RCC_OscConfig+0x4c4>)
 800123e:	f043 0301 	orr.w	r3, r3, #1
 8001242:	6213      	str	r3, [r2, #32]
 8001244:	e02d      	b.n	80012a2 <HAL_RCC_OscConfig+0x36e>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d10c      	bne.n	8001268 <HAL_RCC_OscConfig+0x334>
 800124e:	4b6a      	ldr	r3, [pc, #424]	; (80013f8 <HAL_RCC_OscConfig+0x4c4>)
 8001250:	6a1b      	ldr	r3, [r3, #32]
 8001252:	4a69      	ldr	r2, [pc, #420]	; (80013f8 <HAL_RCC_OscConfig+0x4c4>)
 8001254:	f023 0301 	bic.w	r3, r3, #1
 8001258:	6213      	str	r3, [r2, #32]
 800125a:	4b67      	ldr	r3, [pc, #412]	; (80013f8 <HAL_RCC_OscConfig+0x4c4>)
 800125c:	6a1b      	ldr	r3, [r3, #32]
 800125e:	4a66      	ldr	r2, [pc, #408]	; (80013f8 <HAL_RCC_OscConfig+0x4c4>)
 8001260:	f023 0304 	bic.w	r3, r3, #4
 8001264:	6213      	str	r3, [r2, #32]
 8001266:	e01c      	b.n	80012a2 <HAL_RCC_OscConfig+0x36e>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	2b05      	cmp	r3, #5
 800126e:	d10c      	bne.n	800128a <HAL_RCC_OscConfig+0x356>
 8001270:	4b61      	ldr	r3, [pc, #388]	; (80013f8 <HAL_RCC_OscConfig+0x4c4>)
 8001272:	6a1b      	ldr	r3, [r3, #32]
 8001274:	4a60      	ldr	r2, [pc, #384]	; (80013f8 <HAL_RCC_OscConfig+0x4c4>)
 8001276:	f043 0304 	orr.w	r3, r3, #4
 800127a:	6213      	str	r3, [r2, #32]
 800127c:	4b5e      	ldr	r3, [pc, #376]	; (80013f8 <HAL_RCC_OscConfig+0x4c4>)
 800127e:	6a1b      	ldr	r3, [r3, #32]
 8001280:	4a5d      	ldr	r2, [pc, #372]	; (80013f8 <HAL_RCC_OscConfig+0x4c4>)
 8001282:	f043 0301 	orr.w	r3, r3, #1
 8001286:	6213      	str	r3, [r2, #32]
 8001288:	e00b      	b.n	80012a2 <HAL_RCC_OscConfig+0x36e>
 800128a:	4b5b      	ldr	r3, [pc, #364]	; (80013f8 <HAL_RCC_OscConfig+0x4c4>)
 800128c:	6a1b      	ldr	r3, [r3, #32]
 800128e:	4a5a      	ldr	r2, [pc, #360]	; (80013f8 <HAL_RCC_OscConfig+0x4c4>)
 8001290:	f023 0301 	bic.w	r3, r3, #1
 8001294:	6213      	str	r3, [r2, #32]
 8001296:	4b58      	ldr	r3, [pc, #352]	; (80013f8 <HAL_RCC_OscConfig+0x4c4>)
 8001298:	6a1b      	ldr	r3, [r3, #32]
 800129a:	4a57      	ldr	r2, [pc, #348]	; (80013f8 <HAL_RCC_OscConfig+0x4c4>)
 800129c:	f023 0304 	bic.w	r3, r3, #4
 80012a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d015      	beq.n	80012d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012aa:	f7ff fb95 	bl	80009d8 <HAL_GetTick>
 80012ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012b0:	e00a      	b.n	80012c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012b2:	f7ff fb91 	bl	80009d8 <HAL_GetTick>
 80012b6:	4602      	mov	r2, r0
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d901      	bls.n	80012c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e0b1      	b.n	800142c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012c8:	4b4b      	ldr	r3, [pc, #300]	; (80013f8 <HAL_RCC_OscConfig+0x4c4>)
 80012ca:	6a1b      	ldr	r3, [r3, #32]
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d0ee      	beq.n	80012b2 <HAL_RCC_OscConfig+0x37e>
 80012d4:	e014      	b.n	8001300 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012d6:	f7ff fb7f 	bl	80009d8 <HAL_GetTick>
 80012da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012dc:	e00a      	b.n	80012f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012de:	f7ff fb7b 	bl	80009d8 <HAL_GetTick>
 80012e2:	4602      	mov	r2, r0
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e09b      	b.n	800142c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012f4:	4b40      	ldr	r3, [pc, #256]	; (80013f8 <HAL_RCC_OscConfig+0x4c4>)
 80012f6:	6a1b      	ldr	r3, [r3, #32]
 80012f8:	f003 0302 	and.w	r3, r3, #2
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1ee      	bne.n	80012de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001300:	7dfb      	ldrb	r3, [r7, #23]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d105      	bne.n	8001312 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001306:	4b3c      	ldr	r3, [pc, #240]	; (80013f8 <HAL_RCC_OscConfig+0x4c4>)
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	4a3b      	ldr	r2, [pc, #236]	; (80013f8 <HAL_RCC_OscConfig+0x4c4>)
 800130c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001310:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	69db      	ldr	r3, [r3, #28]
 8001316:	2b00      	cmp	r3, #0
 8001318:	f000 8087 	beq.w	800142a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800131c:	4b36      	ldr	r3, [pc, #216]	; (80013f8 <HAL_RCC_OscConfig+0x4c4>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f003 030c 	and.w	r3, r3, #12
 8001324:	2b08      	cmp	r3, #8
 8001326:	d061      	beq.n	80013ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	69db      	ldr	r3, [r3, #28]
 800132c:	2b02      	cmp	r3, #2
 800132e:	d146      	bne.n	80013be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001330:	4b33      	ldr	r3, [pc, #204]	; (8001400 <HAL_RCC_OscConfig+0x4cc>)
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001336:	f7ff fb4f 	bl	80009d8 <HAL_GetTick>
 800133a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800133c:	e008      	b.n	8001350 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800133e:	f7ff fb4b 	bl	80009d8 <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b02      	cmp	r3, #2
 800134a:	d901      	bls.n	8001350 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e06d      	b.n	800142c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001350:	4b29      	ldr	r3, [pc, #164]	; (80013f8 <HAL_RCC_OscConfig+0x4c4>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1f0      	bne.n	800133e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6a1b      	ldr	r3, [r3, #32]
 8001360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001364:	d108      	bne.n	8001378 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001366:	4b24      	ldr	r3, [pc, #144]	; (80013f8 <HAL_RCC_OscConfig+0x4c4>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	4921      	ldr	r1, [pc, #132]	; (80013f8 <HAL_RCC_OscConfig+0x4c4>)
 8001374:	4313      	orrs	r3, r2
 8001376:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001378:	4b1f      	ldr	r3, [pc, #124]	; (80013f8 <HAL_RCC_OscConfig+0x4c4>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a19      	ldr	r1, [r3, #32]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001388:	430b      	orrs	r3, r1
 800138a:	491b      	ldr	r1, [pc, #108]	; (80013f8 <HAL_RCC_OscConfig+0x4c4>)
 800138c:	4313      	orrs	r3, r2
 800138e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001390:	4b1b      	ldr	r3, [pc, #108]	; (8001400 <HAL_RCC_OscConfig+0x4cc>)
 8001392:	2201      	movs	r2, #1
 8001394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001396:	f7ff fb1f 	bl	80009d8 <HAL_GetTick>
 800139a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800139c:	e008      	b.n	80013b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800139e:	f7ff fb1b 	bl	80009d8 <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e03d      	b.n	800142c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <HAL_RCC_OscConfig+0x4c4>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d0f0      	beq.n	800139e <HAL_RCC_OscConfig+0x46a>
 80013bc:	e035      	b.n	800142a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013be:	4b10      	ldr	r3, [pc, #64]	; (8001400 <HAL_RCC_OscConfig+0x4cc>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c4:	f7ff fb08 	bl	80009d8 <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013cc:	f7ff fb04 	bl	80009d8 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e026      	b.n	800142c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <HAL_RCC_OscConfig+0x4c4>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1f0      	bne.n	80013cc <HAL_RCC_OscConfig+0x498>
 80013ea:	e01e      	b.n	800142a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	69db      	ldr	r3, [r3, #28]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d107      	bne.n	8001404 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e019      	b.n	800142c <HAL_RCC_OscConfig+0x4f8>
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40007000 	.word	0x40007000
 8001400:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001404:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <HAL_RCC_OscConfig+0x500>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a1b      	ldr	r3, [r3, #32]
 8001414:	429a      	cmp	r2, r3
 8001416:	d106      	bne.n	8001426 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001422:	429a      	cmp	r2, r3
 8001424:	d001      	beq.n	800142a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e000      	b.n	800142c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800142a:	2300      	movs	r3, #0
}
 800142c:	4618      	mov	r0, r3
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40021000 	.word	0x40021000

08001438 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d101      	bne.n	800144c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e0d0      	b.n	80015ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800144c:	4b6a      	ldr	r3, [pc, #424]	; (80015f8 <HAL_RCC_ClockConfig+0x1c0>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0307 	and.w	r3, r3, #7
 8001454:	683a      	ldr	r2, [r7, #0]
 8001456:	429a      	cmp	r2, r3
 8001458:	d910      	bls.n	800147c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800145a:	4b67      	ldr	r3, [pc, #412]	; (80015f8 <HAL_RCC_ClockConfig+0x1c0>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f023 0207 	bic.w	r2, r3, #7
 8001462:	4965      	ldr	r1, [pc, #404]	; (80015f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	4313      	orrs	r3, r2
 8001468:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800146a:	4b63      	ldr	r3, [pc, #396]	; (80015f8 <HAL_RCC_ClockConfig+0x1c0>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	683a      	ldr	r2, [r7, #0]
 8001474:	429a      	cmp	r2, r3
 8001476:	d001      	beq.n	800147c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e0b8      	b.n	80015ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0302 	and.w	r3, r3, #2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d020      	beq.n	80014ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0304 	and.w	r3, r3, #4
 8001490:	2b00      	cmp	r3, #0
 8001492:	d005      	beq.n	80014a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001494:	4b59      	ldr	r3, [pc, #356]	; (80015fc <HAL_RCC_ClockConfig+0x1c4>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	4a58      	ldr	r2, [pc, #352]	; (80015fc <HAL_RCC_ClockConfig+0x1c4>)
 800149a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800149e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0308 	and.w	r3, r3, #8
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d005      	beq.n	80014b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014ac:	4b53      	ldr	r3, [pc, #332]	; (80015fc <HAL_RCC_ClockConfig+0x1c4>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	4a52      	ldr	r2, [pc, #328]	; (80015fc <HAL_RCC_ClockConfig+0x1c4>)
 80014b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80014b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014b8:	4b50      	ldr	r3, [pc, #320]	; (80015fc <HAL_RCC_ClockConfig+0x1c4>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	494d      	ldr	r1, [pc, #308]	; (80015fc <HAL_RCC_ClockConfig+0x1c4>)
 80014c6:	4313      	orrs	r3, r2
 80014c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d040      	beq.n	8001558 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d107      	bne.n	80014ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014de:	4b47      	ldr	r3, [pc, #284]	; (80015fc <HAL_RCC_ClockConfig+0x1c4>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d115      	bne.n	8001516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e07f      	b.n	80015ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d107      	bne.n	8001506 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014f6:	4b41      	ldr	r3, [pc, #260]	; (80015fc <HAL_RCC_ClockConfig+0x1c4>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d109      	bne.n	8001516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e073      	b.n	80015ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001506:	4b3d      	ldr	r3, [pc, #244]	; (80015fc <HAL_RCC_ClockConfig+0x1c4>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d101      	bne.n	8001516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e06b      	b.n	80015ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001516:	4b39      	ldr	r3, [pc, #228]	; (80015fc <HAL_RCC_ClockConfig+0x1c4>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f023 0203 	bic.w	r2, r3, #3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	4936      	ldr	r1, [pc, #216]	; (80015fc <HAL_RCC_ClockConfig+0x1c4>)
 8001524:	4313      	orrs	r3, r2
 8001526:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001528:	f7ff fa56 	bl	80009d8 <HAL_GetTick>
 800152c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800152e:	e00a      	b.n	8001546 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001530:	f7ff fa52 	bl	80009d8 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	f241 3288 	movw	r2, #5000	; 0x1388
 800153e:	4293      	cmp	r3, r2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e053      	b.n	80015ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001546:	4b2d      	ldr	r3, [pc, #180]	; (80015fc <HAL_RCC_ClockConfig+0x1c4>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f003 020c 	and.w	r2, r3, #12
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	429a      	cmp	r2, r3
 8001556:	d1eb      	bne.n	8001530 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001558:	4b27      	ldr	r3, [pc, #156]	; (80015f8 <HAL_RCC_ClockConfig+0x1c0>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0307 	and.w	r3, r3, #7
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	429a      	cmp	r2, r3
 8001564:	d210      	bcs.n	8001588 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001566:	4b24      	ldr	r3, [pc, #144]	; (80015f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f023 0207 	bic.w	r2, r3, #7
 800156e:	4922      	ldr	r1, [pc, #136]	; (80015f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	4313      	orrs	r3, r2
 8001574:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001576:	4b20      	ldr	r3, [pc, #128]	; (80015f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	429a      	cmp	r2, r3
 8001582:	d001      	beq.n	8001588 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e032      	b.n	80015ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0304 	and.w	r3, r3, #4
 8001590:	2b00      	cmp	r3, #0
 8001592:	d008      	beq.n	80015a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001594:	4b19      	ldr	r3, [pc, #100]	; (80015fc <HAL_RCC_ClockConfig+0x1c4>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	4916      	ldr	r1, [pc, #88]	; (80015fc <HAL_RCC_ClockConfig+0x1c4>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0308 	and.w	r3, r3, #8
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d009      	beq.n	80015c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015b2:	4b12      	ldr	r3, [pc, #72]	; (80015fc <HAL_RCC_ClockConfig+0x1c4>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	490e      	ldr	r1, [pc, #56]	; (80015fc <HAL_RCC_ClockConfig+0x1c4>)
 80015c2:	4313      	orrs	r3, r2
 80015c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015c6:	f000 f821 	bl	800160c <HAL_RCC_GetSysClockFreq>
 80015ca:	4602      	mov	r2, r0
 80015cc:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <HAL_RCC_ClockConfig+0x1c4>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	091b      	lsrs	r3, r3, #4
 80015d2:	f003 030f 	and.w	r3, r3, #15
 80015d6:	490a      	ldr	r1, [pc, #40]	; (8001600 <HAL_RCC_ClockConfig+0x1c8>)
 80015d8:	5ccb      	ldrb	r3, [r1, r3]
 80015da:	fa22 f303 	lsr.w	r3, r2, r3
 80015de:	4a09      	ldr	r2, [pc, #36]	; (8001604 <HAL_RCC_ClockConfig+0x1cc>)
 80015e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015e2:	4b09      	ldr	r3, [pc, #36]	; (8001608 <HAL_RCC_ClockConfig+0x1d0>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff f9b4 	bl	8000954 <HAL_InitTick>

  return HAL_OK;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40022000 	.word	0x40022000
 80015fc:	40021000 	.word	0x40021000
 8001600:	08002b14 	.word	0x08002b14
 8001604:	20000000 	.word	0x20000000
 8001608:	20000004 	.word	0x20000004

0800160c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800160c:	b490      	push	{r4, r7}
 800160e:	b08a      	sub	sp, #40	; 0x28
 8001610:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001612:	4b29      	ldr	r3, [pc, #164]	; (80016b8 <HAL_RCC_GetSysClockFreq+0xac>)
 8001614:	1d3c      	adds	r4, r7, #4
 8001616:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001618:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800161c:	f240 2301 	movw	r3, #513	; 0x201
 8001620:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
 8001626:	2300      	movs	r3, #0
 8001628:	61bb      	str	r3, [r7, #24]
 800162a:	2300      	movs	r3, #0
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001632:	2300      	movs	r3, #0
 8001634:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001636:	4b21      	ldr	r3, [pc, #132]	; (80016bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	f003 030c 	and.w	r3, r3, #12
 8001642:	2b04      	cmp	r3, #4
 8001644:	d002      	beq.n	800164c <HAL_RCC_GetSysClockFreq+0x40>
 8001646:	2b08      	cmp	r3, #8
 8001648:	d003      	beq.n	8001652 <HAL_RCC_GetSysClockFreq+0x46>
 800164a:	e02b      	b.n	80016a4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800164c:	4b1c      	ldr	r3, [pc, #112]	; (80016c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800164e:	623b      	str	r3, [r7, #32]
      break;
 8001650:	e02b      	b.n	80016aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	0c9b      	lsrs	r3, r3, #18
 8001656:	f003 030f 	and.w	r3, r3, #15
 800165a:	3328      	adds	r3, #40	; 0x28
 800165c:	443b      	add	r3, r7
 800165e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001662:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d012      	beq.n	8001694 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800166e:	4b13      	ldr	r3, [pc, #76]	; (80016bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	0c5b      	lsrs	r3, r3, #17
 8001674:	f003 0301 	and.w	r3, r3, #1
 8001678:	3328      	adds	r3, #40	; 0x28
 800167a:	443b      	add	r3, r7
 800167c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001680:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	4a0e      	ldr	r2, [pc, #56]	; (80016c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001686:	fb03 f202 	mul.w	r2, r3, r2
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
 8001692:	e004      	b.n	800169e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	4a0b      	ldr	r2, [pc, #44]	; (80016c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001698:	fb02 f303 	mul.w	r3, r2, r3
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800169e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a0:	623b      	str	r3, [r7, #32]
      break;
 80016a2:	e002      	b.n	80016aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016a4:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80016a6:	623b      	str	r3, [r7, #32]
      break;
 80016a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016aa:	6a3b      	ldr	r3, [r7, #32]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3728      	adds	r7, #40	; 0x28
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc90      	pop	{r4, r7}
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	08002b04 	.word	0x08002b04
 80016bc:	40021000 	.word	0x40021000
 80016c0:	007a1200 	.word	0x007a1200
 80016c4:	003d0900 	.word	0x003d0900

080016c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016cc:	4b02      	ldr	r3, [pc, #8]	; (80016d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80016ce:	681b      	ldr	r3, [r3, #0]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr
 80016d8:	20000000 	.word	0x20000000

080016dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016e0:	f7ff fff2 	bl	80016c8 <HAL_RCC_GetHCLKFreq>
 80016e4:	4602      	mov	r2, r0
 80016e6:	4b05      	ldr	r3, [pc, #20]	; (80016fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	0a1b      	lsrs	r3, r3, #8
 80016ec:	f003 0307 	and.w	r3, r3, #7
 80016f0:	4903      	ldr	r1, [pc, #12]	; (8001700 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016f2:	5ccb      	ldrb	r3, [r1, r3]
 80016f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40021000 	.word	0x40021000
 8001700:	08002b24 	.word	0x08002b24

08001704 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001708:	f7ff ffde 	bl	80016c8 <HAL_RCC_GetHCLKFreq>
 800170c:	4602      	mov	r2, r0
 800170e:	4b05      	ldr	r3, [pc, #20]	; (8001724 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	0adb      	lsrs	r3, r3, #11
 8001714:	f003 0307 	and.w	r3, r3, #7
 8001718:	4903      	ldr	r1, [pc, #12]	; (8001728 <HAL_RCC_GetPCLK2Freq+0x24>)
 800171a:	5ccb      	ldrb	r3, [r1, r3]
 800171c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001720:	4618      	mov	r0, r3
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40021000 	.word	0x40021000
 8001728:	08002b24 	.word	0x08002b24

0800172c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001734:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <RCC_Delay+0x34>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a0a      	ldr	r2, [pc, #40]	; (8001764 <RCC_Delay+0x38>)
 800173a:	fba2 2303 	umull	r2, r3, r2, r3
 800173e:	0a5b      	lsrs	r3, r3, #9
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	fb02 f303 	mul.w	r3, r2, r3
 8001746:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001748:	bf00      	nop
  }
  while (Delay --);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	1e5a      	subs	r2, r3, #1
 800174e:	60fa      	str	r2, [r7, #12]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1f9      	bne.n	8001748 <RCC_Delay+0x1c>
}
 8001754:	bf00      	nop
 8001756:	bf00      	nop
 8001758:	3714      	adds	r7, #20
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr
 8001760:	20000000 	.word	0x20000000
 8001764:	10624dd3 	.word	0x10624dd3

08001768 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d101      	bne.n	800177a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e01d      	b.n	80017b6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d106      	bne.n	8001794 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7fe ffb0 	bl	80006f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2202      	movs	r2, #2
 8001798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3304      	adds	r3, #4
 80017a4:	4619      	mov	r1, r3
 80017a6:	4610      	mov	r0, r2
 80017a8:	f000 f8f0 	bl	800198c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80017be:	b480      	push	{r7}
 80017c0:	b085      	sub	sp, #20
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2202      	movs	r2, #2
 80017ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f003 0307 	and.w	r3, r3, #7
 80017d8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2b06      	cmp	r3, #6
 80017de:	d007      	beq.n	80017f0 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f042 0201 	orr.w	r2, r2, #1
 80017ee:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2201      	movs	r2, #1
 80017f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr

08001804 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001814:	2b01      	cmp	r3, #1
 8001816:	d101      	bne.n	800181c <HAL_TIM_ConfigClockSource+0x18>
 8001818:	2302      	movs	r3, #2
 800181a:	e0b3      	b.n	8001984 <HAL_TIM_ConfigClockSource+0x180>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2201      	movs	r2, #1
 8001820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2202      	movs	r2, #2
 8001828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800183a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001842:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001854:	d03e      	beq.n	80018d4 <HAL_TIM_ConfigClockSource+0xd0>
 8001856:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800185a:	f200 8087 	bhi.w	800196c <HAL_TIM_ConfigClockSource+0x168>
 800185e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001862:	f000 8085 	beq.w	8001970 <HAL_TIM_ConfigClockSource+0x16c>
 8001866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800186a:	d87f      	bhi.n	800196c <HAL_TIM_ConfigClockSource+0x168>
 800186c:	2b70      	cmp	r3, #112	; 0x70
 800186e:	d01a      	beq.n	80018a6 <HAL_TIM_ConfigClockSource+0xa2>
 8001870:	2b70      	cmp	r3, #112	; 0x70
 8001872:	d87b      	bhi.n	800196c <HAL_TIM_ConfigClockSource+0x168>
 8001874:	2b60      	cmp	r3, #96	; 0x60
 8001876:	d050      	beq.n	800191a <HAL_TIM_ConfigClockSource+0x116>
 8001878:	2b60      	cmp	r3, #96	; 0x60
 800187a:	d877      	bhi.n	800196c <HAL_TIM_ConfigClockSource+0x168>
 800187c:	2b50      	cmp	r3, #80	; 0x50
 800187e:	d03c      	beq.n	80018fa <HAL_TIM_ConfigClockSource+0xf6>
 8001880:	2b50      	cmp	r3, #80	; 0x50
 8001882:	d873      	bhi.n	800196c <HAL_TIM_ConfigClockSource+0x168>
 8001884:	2b40      	cmp	r3, #64	; 0x40
 8001886:	d058      	beq.n	800193a <HAL_TIM_ConfigClockSource+0x136>
 8001888:	2b40      	cmp	r3, #64	; 0x40
 800188a:	d86f      	bhi.n	800196c <HAL_TIM_ConfigClockSource+0x168>
 800188c:	2b30      	cmp	r3, #48	; 0x30
 800188e:	d064      	beq.n	800195a <HAL_TIM_ConfigClockSource+0x156>
 8001890:	2b30      	cmp	r3, #48	; 0x30
 8001892:	d86b      	bhi.n	800196c <HAL_TIM_ConfigClockSource+0x168>
 8001894:	2b20      	cmp	r3, #32
 8001896:	d060      	beq.n	800195a <HAL_TIM_ConfigClockSource+0x156>
 8001898:	2b20      	cmp	r3, #32
 800189a:	d867      	bhi.n	800196c <HAL_TIM_ConfigClockSource+0x168>
 800189c:	2b00      	cmp	r3, #0
 800189e:	d05c      	beq.n	800195a <HAL_TIM_ConfigClockSource+0x156>
 80018a0:	2b10      	cmp	r3, #16
 80018a2:	d05a      	beq.n	800195a <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80018a4:	e062      	b.n	800196c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6818      	ldr	r0, [r3, #0]
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	6899      	ldr	r1, [r3, #8]
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685a      	ldr	r2, [r3, #4]
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	f000 f942 	bl	8001b3e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80018c8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	609a      	str	r2, [r3, #8]
      break;
 80018d2:	e04e      	b.n	8001972 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6818      	ldr	r0, [r3, #0]
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	6899      	ldr	r1, [r3, #8]
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685a      	ldr	r2, [r3, #4]
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	f000 f92b 	bl	8001b3e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	689a      	ldr	r2, [r3, #8]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80018f6:	609a      	str	r2, [r3, #8]
      break;
 80018f8:	e03b      	b.n	8001972 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6818      	ldr	r0, [r3, #0]
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	6859      	ldr	r1, [r3, #4]
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	461a      	mov	r2, r3
 8001908:	f000 f8a2 	bl	8001a50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2150      	movs	r1, #80	; 0x50
 8001912:	4618      	mov	r0, r3
 8001914:	f000 f8f9 	bl	8001b0a <TIM_ITRx_SetConfig>
      break;
 8001918:	e02b      	b.n	8001972 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6818      	ldr	r0, [r3, #0]
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	6859      	ldr	r1, [r3, #4]
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	461a      	mov	r2, r3
 8001928:	f000 f8c0 	bl	8001aac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2160      	movs	r1, #96	; 0x60
 8001932:	4618      	mov	r0, r3
 8001934:	f000 f8e9 	bl	8001b0a <TIM_ITRx_SetConfig>
      break;
 8001938:	e01b      	b.n	8001972 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6818      	ldr	r0, [r3, #0]
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	6859      	ldr	r1, [r3, #4]
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	461a      	mov	r2, r3
 8001948:	f000 f882 	bl	8001a50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2140      	movs	r1, #64	; 0x40
 8001952:	4618      	mov	r0, r3
 8001954:	f000 f8d9 	bl	8001b0a <TIM_ITRx_SetConfig>
      break;
 8001958:	e00b      	b.n	8001972 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4619      	mov	r1, r3
 8001964:	4610      	mov	r0, r2
 8001966:	f000 f8d0 	bl	8001b0a <TIM_ITRx_SetConfig>
      break;
 800196a:	e002      	b.n	8001972 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800196c:	bf00      	nop
 800196e:	e000      	b.n	8001972 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001970:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2201      	movs	r2, #1
 8001976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a29      	ldr	r2, [pc, #164]	; (8001a44 <TIM_Base_SetConfig+0xb8>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d00b      	beq.n	80019bc <TIM_Base_SetConfig+0x30>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019aa:	d007      	beq.n	80019bc <TIM_Base_SetConfig+0x30>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a26      	ldr	r2, [pc, #152]	; (8001a48 <TIM_Base_SetConfig+0xbc>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d003      	beq.n	80019bc <TIM_Base_SetConfig+0x30>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a25      	ldr	r2, [pc, #148]	; (8001a4c <TIM_Base_SetConfig+0xc0>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d108      	bne.n	80019ce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	68fa      	ldr	r2, [r7, #12]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a1c      	ldr	r2, [pc, #112]	; (8001a44 <TIM_Base_SetConfig+0xb8>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d00b      	beq.n	80019ee <TIM_Base_SetConfig+0x62>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019dc:	d007      	beq.n	80019ee <TIM_Base_SetConfig+0x62>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a19      	ldr	r2, [pc, #100]	; (8001a48 <TIM_Base_SetConfig+0xbc>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d003      	beq.n	80019ee <TIM_Base_SetConfig+0x62>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a18      	ldr	r2, [pc, #96]	; (8001a4c <TIM_Base_SetConfig+0xc0>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d108      	bne.n	8001a00 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	68fa      	ldr	r2, [r7, #12]
 8001a12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4a07      	ldr	r2, [pc, #28]	; (8001a44 <TIM_Base_SetConfig+0xb8>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d103      	bne.n	8001a34 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	691a      	ldr	r2, [r3, #16]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	615a      	str	r2, [r3, #20]
}
 8001a3a:	bf00      	nop
 8001a3c:	3714      	adds	r7, #20
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr
 8001a44:	40012c00 	.word	0x40012c00
 8001a48:	40000400 	.word	0x40000400
 8001a4c:	40000800 	.word	0x40000800

08001a50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b087      	sub	sp, #28
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6a1b      	ldr	r3, [r3, #32]
 8001a60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	6a1b      	ldr	r3, [r3, #32]
 8001a66:	f023 0201 	bic.w	r2, r3, #1
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	011b      	lsls	r3, r3, #4
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	f023 030a 	bic.w	r3, r3, #10
 8001a8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	697a      	ldr	r2, [r7, #20]
 8001aa0:	621a      	str	r2, [r3, #32]
}
 8001aa2:	bf00      	nop
 8001aa4:	371c      	adds	r7, #28
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr

08001aac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b087      	sub	sp, #28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	f023 0210 	bic.w	r2, r3, #16
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	6a1b      	ldr	r3, [r3, #32]
 8001ace:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001ad6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	031b      	lsls	r3, r3, #12
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001ae8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	011b      	lsls	r3, r3, #4
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	697a      	ldr	r2, [r7, #20]
 8001af8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	621a      	str	r2, [r3, #32]
}
 8001b00:	bf00      	nop
 8001b02:	371c      	adds	r7, #28
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bc80      	pop	{r7}
 8001b08:	4770      	bx	lr

08001b0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b085      	sub	sp, #20
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
 8001b12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	f043 0307 	orr.w	r3, r3, #7
 8001b2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	68fa      	ldr	r2, [r7, #12]
 8001b32:	609a      	str	r2, [r3, #8]
}
 8001b34:	bf00      	nop
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc80      	pop	{r7}
 8001b3c:	4770      	bx	lr

08001b3e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b087      	sub	sp, #28
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	60f8      	str	r0, [r7, #12]
 8001b46:	60b9      	str	r1, [r7, #8]
 8001b48:	607a      	str	r2, [r7, #4]
 8001b4a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b58:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	021a      	lsls	r2, r3, #8
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	431a      	orrs	r2, r3
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	609a      	str	r2, [r3, #8]
}
 8001b72:	bf00      	nop
 8001b74:	371c      	adds	r7, #28
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr

08001b7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d101      	bne.n	8001b94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001b90:	2302      	movs	r3, #2
 8001b92:	e032      	b.n	8001bfa <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68fa      	ldr	r2, [r7, #12]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bcc:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68fa      	ldr	r2, [r7, #12]
 8001bde:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	68ba      	ldr	r2, [r7, #8]
 8001be6:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr

08001c04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e03f      	b.n	8001c96 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d106      	bne.n	8001c30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7fe fd80 	bl	8000730 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2224      	movs	r2, #36	; 0x24
 8001c34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	68da      	ldr	r2, [r3, #12]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 f9b1 	bl	8001fb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	691a      	ldr	r2, [r3, #16]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	695a      	ldr	r2, [r3, #20]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	68da      	ldr	r2, [r3, #12]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2220      	movs	r2, #32
 8001c88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2220      	movs	r2, #32
 8001c90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b088      	sub	sp, #32
 8001ca2:	af02      	add	r7, sp, #8
 8001ca4:	60f8      	str	r0, [r7, #12]
 8001ca6:	60b9      	str	r1, [r7, #8]
 8001ca8:	603b      	str	r3, [r7, #0]
 8001caa:	4613      	mov	r3, r2
 8001cac:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b20      	cmp	r3, #32
 8001cbc:	f040 8083 	bne.w	8001dc6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d002      	beq.n	8001ccc <HAL_UART_Transmit+0x2e>
 8001cc6:	88fb      	ldrh	r3, [r7, #6]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e07b      	b.n	8001dc8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d101      	bne.n	8001cde <HAL_UART_Transmit+0x40>
 8001cda:	2302      	movs	r3, #2
 8001cdc:	e074      	b.n	8001dc8 <HAL_UART_Transmit+0x12a>
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2221      	movs	r2, #33	; 0x21
 8001cf0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001cf4:	f7fe fe70 	bl	80009d8 <HAL_GetTick>
 8001cf8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	88fa      	ldrh	r2, [r7, #6]
 8001cfe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	88fa      	ldrh	r2, [r7, #6]
 8001d04:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001d06:	e042      	b.n	8001d8e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d1e:	d122      	bne.n	8001d66 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	2200      	movs	r2, #0
 8001d28:	2180      	movs	r1, #128	; 0x80
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f000 f8f6 	bl	8001f1c <UART_WaitOnFlagUntilTimeout>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e046      	b.n	8001dc8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	881b      	ldrh	r3, [r3, #0]
 8001d42:	461a      	mov	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d4c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d103      	bne.n	8001d5e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	3302      	adds	r3, #2
 8001d5a:	60bb      	str	r3, [r7, #8]
 8001d5c:	e017      	b.n	8001d8e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	3301      	adds	r3, #1
 8001d62:	60bb      	str	r3, [r7, #8]
 8001d64:	e013      	b.n	8001d8e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	9300      	str	r3, [sp, #0]
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	2180      	movs	r1, #128	; 0x80
 8001d70:	68f8      	ldr	r0, [r7, #12]
 8001d72:	f000 f8d3 	bl	8001f1c <UART_WaitOnFlagUntilTimeout>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e023      	b.n	8001dc8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	1c5a      	adds	r2, r3, #1
 8001d84:	60ba      	str	r2, [r7, #8]
 8001d86:	781a      	ldrb	r2, [r3, #0]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1b7      	bne.n	8001d08 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2140      	movs	r1, #64	; 0x40
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f000 f8ba 	bl	8001f1c <UART_WaitOnFlagUntilTimeout>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e00a      	b.n	8001dc8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2220      	movs	r2, #32
 8001db6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	e000      	b.n	8001dc8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001dc6:	2302      	movs	r3, #2
  }
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b088      	sub	sp, #32
 8001dd4:	af02      	add	r7, sp, #8
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	603b      	str	r3, [r7, #0]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b20      	cmp	r3, #32
 8001dee:	f040 8090 	bne.w	8001f12 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d002      	beq.n	8001dfe <HAL_UART_Receive+0x2e>
 8001df8:	88fb      	ldrh	r3, [r7, #6]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e088      	b.n	8001f14 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d101      	bne.n	8001e10 <HAL_UART_Receive+0x40>
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	e081      	b.n	8001f14 <HAL_UART_Receive+0x144>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2222      	movs	r2, #34	; 0x22
 8001e22:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001e26:	f7fe fdd7 	bl	80009d8 <HAL_GetTick>
 8001e2a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	88fa      	ldrh	r2, [r7, #6]
 8001e30:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	88fa      	ldrh	r2, [r7, #6]
 8001e36:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001e38:	e05c      	b.n	8001ef4 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	3b01      	subs	r3, #1
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e50:	d12b      	bne.n	8001eaa <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	2120      	movs	r1, #32
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	f000 f85d 	bl	8001f1c <UART_WaitOnFlagUntilTimeout>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e053      	b.n	8001f14 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d10c      	bne.n	8001e92 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	3302      	adds	r3, #2
 8001e8e:	60bb      	str	r3, [r7, #8]
 8001e90:	e030      	b.n	8001ef4 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	60bb      	str	r3, [r7, #8]
 8001ea8:	e024      	b.n	8001ef4 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	2120      	movs	r1, #32
 8001eb4:	68f8      	ldr	r0, [r7, #12]
 8001eb6:	f000 f831 	bl	8001f1c <UART_WaitOnFlagUntilTimeout>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e027      	b.n	8001f14 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d108      	bne.n	8001ede <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6859      	ldr	r1, [r3, #4]
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	1c5a      	adds	r2, r3, #1
 8001ed6:	60ba      	str	r2, [r7, #8]
 8001ed8:	b2ca      	uxtb	r2, r1
 8001eda:	701a      	strb	r2, [r3, #0]
 8001edc:	e00a      	b.n	8001ef4 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	1c59      	adds	r1, r3, #1
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d19d      	bne.n	8001e3a <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2220      	movs	r2, #32
 8001f02:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	e000      	b.n	8001f14 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8001f12:	2302      	movs	r3, #2
  }
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3718      	adds	r7, #24
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	603b      	str	r3, [r7, #0]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f2c:	e02c      	b.n	8001f88 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f34:	d028      	beq.n	8001f88 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d007      	beq.n	8001f4c <UART_WaitOnFlagUntilTimeout+0x30>
 8001f3c:	f7fe fd4c 	bl	80009d8 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d21d      	bcs.n	8001f88 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68da      	ldr	r2, [r3, #12]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001f5a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	695a      	ldr	r2, [r3, #20]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 0201 	bic.w	r2, r2, #1
 8001f6a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2220      	movs	r2, #32
 8001f70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2220      	movs	r2, #32
 8001f78:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e00f      	b.n	8001fa8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	4013      	ands	r3, r2
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	bf0c      	ite	eq
 8001f98:	2301      	moveq	r3, #1
 8001f9a:	2300      	movne	r3, #0
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d0c3      	beq.n	8001f2e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68da      	ldr	r2, [r3, #12]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689a      	ldr	r2, [r3, #8]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	695b      	ldr	r3, [r3, #20]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001fea:	f023 030c 	bic.w	r3, r3, #12
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	6812      	ldr	r2, [r2, #0]
 8001ff2:	68f9      	ldr	r1, [r7, #12]
 8001ff4:	430b      	orrs	r3, r1
 8001ff6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	699a      	ldr	r2, [r3, #24]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	430a      	orrs	r2, r1
 800200c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a52      	ldr	r2, [pc, #328]	; (800215c <UART_SetConfig+0x1ac>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d14e      	bne.n	80020b6 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002018:	f7ff fb74 	bl	8001704 <HAL_RCC_GetPCLK2Freq>
 800201c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800201e:	68ba      	ldr	r2, [r7, #8]
 8002020:	4613      	mov	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4413      	add	r3, r2
 8002026:	009a      	lsls	r2, r3, #2
 8002028:	441a      	add	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	fbb2 f3f3 	udiv	r3, r2, r3
 8002034:	4a4a      	ldr	r2, [pc, #296]	; (8002160 <UART_SetConfig+0x1b0>)
 8002036:	fba2 2303 	umull	r2, r3, r2, r3
 800203a:	095b      	lsrs	r3, r3, #5
 800203c:	0119      	lsls	r1, r3, #4
 800203e:	68ba      	ldr	r2, [r7, #8]
 8002040:	4613      	mov	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	009a      	lsls	r2, r3, #2
 8002048:	441a      	add	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	fbb2 f2f3 	udiv	r2, r2, r3
 8002054:	4b42      	ldr	r3, [pc, #264]	; (8002160 <UART_SetConfig+0x1b0>)
 8002056:	fba3 0302 	umull	r0, r3, r3, r2
 800205a:	095b      	lsrs	r3, r3, #5
 800205c:	2064      	movs	r0, #100	; 0x64
 800205e:	fb00 f303 	mul.w	r3, r0, r3
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	011b      	lsls	r3, r3, #4
 8002066:	3332      	adds	r3, #50	; 0x32
 8002068:	4a3d      	ldr	r2, [pc, #244]	; (8002160 <UART_SetConfig+0x1b0>)
 800206a:	fba2 2303 	umull	r2, r3, r2, r3
 800206e:	095b      	lsrs	r3, r3, #5
 8002070:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002074:	4419      	add	r1, r3
 8002076:	68ba      	ldr	r2, [r7, #8]
 8002078:	4613      	mov	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4413      	add	r3, r2
 800207e:	009a      	lsls	r2, r3, #2
 8002080:	441a      	add	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	fbb2 f2f3 	udiv	r2, r2, r3
 800208c:	4b34      	ldr	r3, [pc, #208]	; (8002160 <UART_SetConfig+0x1b0>)
 800208e:	fba3 0302 	umull	r0, r3, r3, r2
 8002092:	095b      	lsrs	r3, r3, #5
 8002094:	2064      	movs	r0, #100	; 0x64
 8002096:	fb00 f303 	mul.w	r3, r0, r3
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	011b      	lsls	r3, r3, #4
 800209e:	3332      	adds	r3, #50	; 0x32
 80020a0:	4a2f      	ldr	r2, [pc, #188]	; (8002160 <UART_SetConfig+0x1b0>)
 80020a2:	fba2 2303 	umull	r2, r3, r2, r3
 80020a6:	095b      	lsrs	r3, r3, #5
 80020a8:	f003 020f 	and.w	r2, r3, #15
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	440a      	add	r2, r1
 80020b2:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80020b4:	e04d      	b.n	8002152 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80020b6:	f7ff fb11 	bl	80016dc <HAL_RCC_GetPCLK1Freq>
 80020ba:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020bc:	68ba      	ldr	r2, [r7, #8]
 80020be:	4613      	mov	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	009a      	lsls	r2, r3, #2
 80020c6:	441a      	add	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d2:	4a23      	ldr	r2, [pc, #140]	; (8002160 <UART_SetConfig+0x1b0>)
 80020d4:	fba2 2303 	umull	r2, r3, r2, r3
 80020d8:	095b      	lsrs	r3, r3, #5
 80020da:	0119      	lsls	r1, r3, #4
 80020dc:	68ba      	ldr	r2, [r7, #8]
 80020de:	4613      	mov	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	009a      	lsls	r2, r3, #2
 80020e6:	441a      	add	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80020f2:	4b1b      	ldr	r3, [pc, #108]	; (8002160 <UART_SetConfig+0x1b0>)
 80020f4:	fba3 0302 	umull	r0, r3, r3, r2
 80020f8:	095b      	lsrs	r3, r3, #5
 80020fa:	2064      	movs	r0, #100	; 0x64
 80020fc:	fb00 f303 	mul.w	r3, r0, r3
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	011b      	lsls	r3, r3, #4
 8002104:	3332      	adds	r3, #50	; 0x32
 8002106:	4a16      	ldr	r2, [pc, #88]	; (8002160 <UART_SetConfig+0x1b0>)
 8002108:	fba2 2303 	umull	r2, r3, r2, r3
 800210c:	095b      	lsrs	r3, r3, #5
 800210e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002112:	4419      	add	r1, r3
 8002114:	68ba      	ldr	r2, [r7, #8]
 8002116:	4613      	mov	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	009a      	lsls	r2, r3, #2
 800211e:	441a      	add	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	fbb2 f2f3 	udiv	r2, r2, r3
 800212a:	4b0d      	ldr	r3, [pc, #52]	; (8002160 <UART_SetConfig+0x1b0>)
 800212c:	fba3 0302 	umull	r0, r3, r3, r2
 8002130:	095b      	lsrs	r3, r3, #5
 8002132:	2064      	movs	r0, #100	; 0x64
 8002134:	fb00 f303 	mul.w	r3, r0, r3
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	011b      	lsls	r3, r3, #4
 800213c:	3332      	adds	r3, #50	; 0x32
 800213e:	4a08      	ldr	r2, [pc, #32]	; (8002160 <UART_SetConfig+0x1b0>)
 8002140:	fba2 2303 	umull	r2, r3, r2, r3
 8002144:	095b      	lsrs	r3, r3, #5
 8002146:	f003 020f 	and.w	r2, r3, #15
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	440a      	add	r2, r1
 8002150:	609a      	str	r2, [r3, #8]
}
 8002152:	bf00      	nop
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40013800 	.word	0x40013800
 8002160:	51eb851f 	.word	0x51eb851f

08002164 <__errno>:
 8002164:	4b01      	ldr	r3, [pc, #4]	; (800216c <__errno+0x8>)
 8002166:	6818      	ldr	r0, [r3, #0]
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	2000000c 	.word	0x2000000c

08002170 <__libc_init_array>:
 8002170:	b570      	push	{r4, r5, r6, lr}
 8002172:	2600      	movs	r6, #0
 8002174:	4d0c      	ldr	r5, [pc, #48]	; (80021a8 <__libc_init_array+0x38>)
 8002176:	4c0d      	ldr	r4, [pc, #52]	; (80021ac <__libc_init_array+0x3c>)
 8002178:	1b64      	subs	r4, r4, r5
 800217a:	10a4      	asrs	r4, r4, #2
 800217c:	42a6      	cmp	r6, r4
 800217e:	d109      	bne.n	8002194 <__libc_init_array+0x24>
 8002180:	f000 fc9c 	bl	8002abc <_init>
 8002184:	2600      	movs	r6, #0
 8002186:	4d0a      	ldr	r5, [pc, #40]	; (80021b0 <__libc_init_array+0x40>)
 8002188:	4c0a      	ldr	r4, [pc, #40]	; (80021b4 <__libc_init_array+0x44>)
 800218a:	1b64      	subs	r4, r4, r5
 800218c:	10a4      	asrs	r4, r4, #2
 800218e:	42a6      	cmp	r6, r4
 8002190:	d105      	bne.n	800219e <__libc_init_array+0x2e>
 8002192:	bd70      	pop	{r4, r5, r6, pc}
 8002194:	f855 3b04 	ldr.w	r3, [r5], #4
 8002198:	4798      	blx	r3
 800219a:	3601      	adds	r6, #1
 800219c:	e7ee      	b.n	800217c <__libc_init_array+0xc>
 800219e:	f855 3b04 	ldr.w	r3, [r5], #4
 80021a2:	4798      	blx	r3
 80021a4:	3601      	adds	r6, #1
 80021a6:	e7f2      	b.n	800218e <__libc_init_array+0x1e>
 80021a8:	08002b60 	.word	0x08002b60
 80021ac:	08002b60 	.word	0x08002b60
 80021b0:	08002b60 	.word	0x08002b60
 80021b4:	08002b64 	.word	0x08002b64

080021b8 <memset>:
 80021b8:	4603      	mov	r3, r0
 80021ba:	4402      	add	r2, r0
 80021bc:	4293      	cmp	r3, r2
 80021be:	d100      	bne.n	80021c2 <memset+0xa>
 80021c0:	4770      	bx	lr
 80021c2:	f803 1b01 	strb.w	r1, [r3], #1
 80021c6:	e7f9      	b.n	80021bc <memset+0x4>

080021c8 <siprintf>:
 80021c8:	b40e      	push	{r1, r2, r3}
 80021ca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80021ce:	b500      	push	{lr}
 80021d0:	b09c      	sub	sp, #112	; 0x70
 80021d2:	ab1d      	add	r3, sp, #116	; 0x74
 80021d4:	9002      	str	r0, [sp, #8]
 80021d6:	9006      	str	r0, [sp, #24]
 80021d8:	9107      	str	r1, [sp, #28]
 80021da:	9104      	str	r1, [sp, #16]
 80021dc:	4808      	ldr	r0, [pc, #32]	; (8002200 <siprintf+0x38>)
 80021de:	4909      	ldr	r1, [pc, #36]	; (8002204 <siprintf+0x3c>)
 80021e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80021e4:	9105      	str	r1, [sp, #20]
 80021e6:	6800      	ldr	r0, [r0, #0]
 80021e8:	a902      	add	r1, sp, #8
 80021ea:	9301      	str	r3, [sp, #4]
 80021ec:	f000 f868 	bl	80022c0 <_svfiprintf_r>
 80021f0:	2200      	movs	r2, #0
 80021f2:	9b02      	ldr	r3, [sp, #8]
 80021f4:	701a      	strb	r2, [r3, #0]
 80021f6:	b01c      	add	sp, #112	; 0x70
 80021f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80021fc:	b003      	add	sp, #12
 80021fe:	4770      	bx	lr
 8002200:	2000000c 	.word	0x2000000c
 8002204:	ffff0208 	.word	0xffff0208

08002208 <__ssputs_r>:
 8002208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800220c:	688e      	ldr	r6, [r1, #8]
 800220e:	4682      	mov	sl, r0
 8002210:	429e      	cmp	r6, r3
 8002212:	460c      	mov	r4, r1
 8002214:	4690      	mov	r8, r2
 8002216:	461f      	mov	r7, r3
 8002218:	d838      	bhi.n	800228c <__ssputs_r+0x84>
 800221a:	898a      	ldrh	r2, [r1, #12]
 800221c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002220:	d032      	beq.n	8002288 <__ssputs_r+0x80>
 8002222:	6825      	ldr	r5, [r4, #0]
 8002224:	6909      	ldr	r1, [r1, #16]
 8002226:	3301      	adds	r3, #1
 8002228:	eba5 0901 	sub.w	r9, r5, r1
 800222c:	6965      	ldr	r5, [r4, #20]
 800222e:	444b      	add	r3, r9
 8002230:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002234:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002238:	106d      	asrs	r5, r5, #1
 800223a:	429d      	cmp	r5, r3
 800223c:	bf38      	it	cc
 800223e:	461d      	movcc	r5, r3
 8002240:	0553      	lsls	r3, r2, #21
 8002242:	d531      	bpl.n	80022a8 <__ssputs_r+0xa0>
 8002244:	4629      	mov	r1, r5
 8002246:	f000 fb6f 	bl	8002928 <_malloc_r>
 800224a:	4606      	mov	r6, r0
 800224c:	b950      	cbnz	r0, 8002264 <__ssputs_r+0x5c>
 800224e:	230c      	movs	r3, #12
 8002250:	f04f 30ff 	mov.w	r0, #4294967295
 8002254:	f8ca 3000 	str.w	r3, [sl]
 8002258:	89a3      	ldrh	r3, [r4, #12]
 800225a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800225e:	81a3      	strh	r3, [r4, #12]
 8002260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002264:	464a      	mov	r2, r9
 8002266:	6921      	ldr	r1, [r4, #16]
 8002268:	f000 face 	bl	8002808 <memcpy>
 800226c:	89a3      	ldrh	r3, [r4, #12]
 800226e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002276:	81a3      	strh	r3, [r4, #12]
 8002278:	6126      	str	r6, [r4, #16]
 800227a:	444e      	add	r6, r9
 800227c:	6026      	str	r6, [r4, #0]
 800227e:	463e      	mov	r6, r7
 8002280:	6165      	str	r5, [r4, #20]
 8002282:	eba5 0509 	sub.w	r5, r5, r9
 8002286:	60a5      	str	r5, [r4, #8]
 8002288:	42be      	cmp	r6, r7
 800228a:	d900      	bls.n	800228e <__ssputs_r+0x86>
 800228c:	463e      	mov	r6, r7
 800228e:	4632      	mov	r2, r6
 8002290:	4641      	mov	r1, r8
 8002292:	6820      	ldr	r0, [r4, #0]
 8002294:	f000 fac6 	bl	8002824 <memmove>
 8002298:	68a3      	ldr	r3, [r4, #8]
 800229a:	2000      	movs	r0, #0
 800229c:	1b9b      	subs	r3, r3, r6
 800229e:	60a3      	str	r3, [r4, #8]
 80022a0:	6823      	ldr	r3, [r4, #0]
 80022a2:	4433      	add	r3, r6
 80022a4:	6023      	str	r3, [r4, #0]
 80022a6:	e7db      	b.n	8002260 <__ssputs_r+0x58>
 80022a8:	462a      	mov	r2, r5
 80022aa:	f000 fbb1 	bl	8002a10 <_realloc_r>
 80022ae:	4606      	mov	r6, r0
 80022b0:	2800      	cmp	r0, #0
 80022b2:	d1e1      	bne.n	8002278 <__ssputs_r+0x70>
 80022b4:	4650      	mov	r0, sl
 80022b6:	6921      	ldr	r1, [r4, #16]
 80022b8:	f000 face 	bl	8002858 <_free_r>
 80022bc:	e7c7      	b.n	800224e <__ssputs_r+0x46>
	...

080022c0 <_svfiprintf_r>:
 80022c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022c4:	4698      	mov	r8, r3
 80022c6:	898b      	ldrh	r3, [r1, #12]
 80022c8:	4607      	mov	r7, r0
 80022ca:	061b      	lsls	r3, r3, #24
 80022cc:	460d      	mov	r5, r1
 80022ce:	4614      	mov	r4, r2
 80022d0:	b09d      	sub	sp, #116	; 0x74
 80022d2:	d50e      	bpl.n	80022f2 <_svfiprintf_r+0x32>
 80022d4:	690b      	ldr	r3, [r1, #16]
 80022d6:	b963      	cbnz	r3, 80022f2 <_svfiprintf_r+0x32>
 80022d8:	2140      	movs	r1, #64	; 0x40
 80022da:	f000 fb25 	bl	8002928 <_malloc_r>
 80022de:	6028      	str	r0, [r5, #0]
 80022e0:	6128      	str	r0, [r5, #16]
 80022e2:	b920      	cbnz	r0, 80022ee <_svfiprintf_r+0x2e>
 80022e4:	230c      	movs	r3, #12
 80022e6:	603b      	str	r3, [r7, #0]
 80022e8:	f04f 30ff 	mov.w	r0, #4294967295
 80022ec:	e0d1      	b.n	8002492 <_svfiprintf_r+0x1d2>
 80022ee:	2340      	movs	r3, #64	; 0x40
 80022f0:	616b      	str	r3, [r5, #20]
 80022f2:	2300      	movs	r3, #0
 80022f4:	9309      	str	r3, [sp, #36]	; 0x24
 80022f6:	2320      	movs	r3, #32
 80022f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80022fc:	2330      	movs	r3, #48	; 0x30
 80022fe:	f04f 0901 	mov.w	r9, #1
 8002302:	f8cd 800c 	str.w	r8, [sp, #12]
 8002306:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80024ac <_svfiprintf_r+0x1ec>
 800230a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800230e:	4623      	mov	r3, r4
 8002310:	469a      	mov	sl, r3
 8002312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002316:	b10a      	cbz	r2, 800231c <_svfiprintf_r+0x5c>
 8002318:	2a25      	cmp	r2, #37	; 0x25
 800231a:	d1f9      	bne.n	8002310 <_svfiprintf_r+0x50>
 800231c:	ebba 0b04 	subs.w	fp, sl, r4
 8002320:	d00b      	beq.n	800233a <_svfiprintf_r+0x7a>
 8002322:	465b      	mov	r3, fp
 8002324:	4622      	mov	r2, r4
 8002326:	4629      	mov	r1, r5
 8002328:	4638      	mov	r0, r7
 800232a:	f7ff ff6d 	bl	8002208 <__ssputs_r>
 800232e:	3001      	adds	r0, #1
 8002330:	f000 80aa 	beq.w	8002488 <_svfiprintf_r+0x1c8>
 8002334:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002336:	445a      	add	r2, fp
 8002338:	9209      	str	r2, [sp, #36]	; 0x24
 800233a:	f89a 3000 	ldrb.w	r3, [sl]
 800233e:	2b00      	cmp	r3, #0
 8002340:	f000 80a2 	beq.w	8002488 <_svfiprintf_r+0x1c8>
 8002344:	2300      	movs	r3, #0
 8002346:	f04f 32ff 	mov.w	r2, #4294967295
 800234a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800234e:	f10a 0a01 	add.w	sl, sl, #1
 8002352:	9304      	str	r3, [sp, #16]
 8002354:	9307      	str	r3, [sp, #28]
 8002356:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800235a:	931a      	str	r3, [sp, #104]	; 0x68
 800235c:	4654      	mov	r4, sl
 800235e:	2205      	movs	r2, #5
 8002360:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002364:	4851      	ldr	r0, [pc, #324]	; (80024ac <_svfiprintf_r+0x1ec>)
 8002366:	f000 fa41 	bl	80027ec <memchr>
 800236a:	9a04      	ldr	r2, [sp, #16]
 800236c:	b9d8      	cbnz	r0, 80023a6 <_svfiprintf_r+0xe6>
 800236e:	06d0      	lsls	r0, r2, #27
 8002370:	bf44      	itt	mi
 8002372:	2320      	movmi	r3, #32
 8002374:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002378:	0711      	lsls	r1, r2, #28
 800237a:	bf44      	itt	mi
 800237c:	232b      	movmi	r3, #43	; 0x2b
 800237e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002382:	f89a 3000 	ldrb.w	r3, [sl]
 8002386:	2b2a      	cmp	r3, #42	; 0x2a
 8002388:	d015      	beq.n	80023b6 <_svfiprintf_r+0xf6>
 800238a:	4654      	mov	r4, sl
 800238c:	2000      	movs	r0, #0
 800238e:	f04f 0c0a 	mov.w	ip, #10
 8002392:	9a07      	ldr	r2, [sp, #28]
 8002394:	4621      	mov	r1, r4
 8002396:	f811 3b01 	ldrb.w	r3, [r1], #1
 800239a:	3b30      	subs	r3, #48	; 0x30
 800239c:	2b09      	cmp	r3, #9
 800239e:	d94e      	bls.n	800243e <_svfiprintf_r+0x17e>
 80023a0:	b1b0      	cbz	r0, 80023d0 <_svfiprintf_r+0x110>
 80023a2:	9207      	str	r2, [sp, #28]
 80023a4:	e014      	b.n	80023d0 <_svfiprintf_r+0x110>
 80023a6:	eba0 0308 	sub.w	r3, r0, r8
 80023aa:	fa09 f303 	lsl.w	r3, r9, r3
 80023ae:	4313      	orrs	r3, r2
 80023b0:	46a2      	mov	sl, r4
 80023b2:	9304      	str	r3, [sp, #16]
 80023b4:	e7d2      	b.n	800235c <_svfiprintf_r+0x9c>
 80023b6:	9b03      	ldr	r3, [sp, #12]
 80023b8:	1d19      	adds	r1, r3, #4
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	9103      	str	r1, [sp, #12]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	bfbb      	ittet	lt
 80023c2:	425b      	neglt	r3, r3
 80023c4:	f042 0202 	orrlt.w	r2, r2, #2
 80023c8:	9307      	strge	r3, [sp, #28]
 80023ca:	9307      	strlt	r3, [sp, #28]
 80023cc:	bfb8      	it	lt
 80023ce:	9204      	strlt	r2, [sp, #16]
 80023d0:	7823      	ldrb	r3, [r4, #0]
 80023d2:	2b2e      	cmp	r3, #46	; 0x2e
 80023d4:	d10c      	bne.n	80023f0 <_svfiprintf_r+0x130>
 80023d6:	7863      	ldrb	r3, [r4, #1]
 80023d8:	2b2a      	cmp	r3, #42	; 0x2a
 80023da:	d135      	bne.n	8002448 <_svfiprintf_r+0x188>
 80023dc:	9b03      	ldr	r3, [sp, #12]
 80023de:	3402      	adds	r4, #2
 80023e0:	1d1a      	adds	r2, r3, #4
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	9203      	str	r2, [sp, #12]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	bfb8      	it	lt
 80023ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80023ee:	9305      	str	r3, [sp, #20]
 80023f0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80024b0 <_svfiprintf_r+0x1f0>
 80023f4:	2203      	movs	r2, #3
 80023f6:	4650      	mov	r0, sl
 80023f8:	7821      	ldrb	r1, [r4, #0]
 80023fa:	f000 f9f7 	bl	80027ec <memchr>
 80023fe:	b140      	cbz	r0, 8002412 <_svfiprintf_r+0x152>
 8002400:	2340      	movs	r3, #64	; 0x40
 8002402:	eba0 000a 	sub.w	r0, r0, sl
 8002406:	fa03 f000 	lsl.w	r0, r3, r0
 800240a:	9b04      	ldr	r3, [sp, #16]
 800240c:	3401      	adds	r4, #1
 800240e:	4303      	orrs	r3, r0
 8002410:	9304      	str	r3, [sp, #16]
 8002412:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002416:	2206      	movs	r2, #6
 8002418:	4826      	ldr	r0, [pc, #152]	; (80024b4 <_svfiprintf_r+0x1f4>)
 800241a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800241e:	f000 f9e5 	bl	80027ec <memchr>
 8002422:	2800      	cmp	r0, #0
 8002424:	d038      	beq.n	8002498 <_svfiprintf_r+0x1d8>
 8002426:	4b24      	ldr	r3, [pc, #144]	; (80024b8 <_svfiprintf_r+0x1f8>)
 8002428:	bb1b      	cbnz	r3, 8002472 <_svfiprintf_r+0x1b2>
 800242a:	9b03      	ldr	r3, [sp, #12]
 800242c:	3307      	adds	r3, #7
 800242e:	f023 0307 	bic.w	r3, r3, #7
 8002432:	3308      	adds	r3, #8
 8002434:	9303      	str	r3, [sp, #12]
 8002436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002438:	4433      	add	r3, r6
 800243a:	9309      	str	r3, [sp, #36]	; 0x24
 800243c:	e767      	b.n	800230e <_svfiprintf_r+0x4e>
 800243e:	460c      	mov	r4, r1
 8002440:	2001      	movs	r0, #1
 8002442:	fb0c 3202 	mla	r2, ip, r2, r3
 8002446:	e7a5      	b.n	8002394 <_svfiprintf_r+0xd4>
 8002448:	2300      	movs	r3, #0
 800244a:	f04f 0c0a 	mov.w	ip, #10
 800244e:	4619      	mov	r1, r3
 8002450:	3401      	adds	r4, #1
 8002452:	9305      	str	r3, [sp, #20]
 8002454:	4620      	mov	r0, r4
 8002456:	f810 2b01 	ldrb.w	r2, [r0], #1
 800245a:	3a30      	subs	r2, #48	; 0x30
 800245c:	2a09      	cmp	r2, #9
 800245e:	d903      	bls.n	8002468 <_svfiprintf_r+0x1a8>
 8002460:	2b00      	cmp	r3, #0
 8002462:	d0c5      	beq.n	80023f0 <_svfiprintf_r+0x130>
 8002464:	9105      	str	r1, [sp, #20]
 8002466:	e7c3      	b.n	80023f0 <_svfiprintf_r+0x130>
 8002468:	4604      	mov	r4, r0
 800246a:	2301      	movs	r3, #1
 800246c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002470:	e7f0      	b.n	8002454 <_svfiprintf_r+0x194>
 8002472:	ab03      	add	r3, sp, #12
 8002474:	9300      	str	r3, [sp, #0]
 8002476:	462a      	mov	r2, r5
 8002478:	4638      	mov	r0, r7
 800247a:	4b10      	ldr	r3, [pc, #64]	; (80024bc <_svfiprintf_r+0x1fc>)
 800247c:	a904      	add	r1, sp, #16
 800247e:	f3af 8000 	nop.w
 8002482:	1c42      	adds	r2, r0, #1
 8002484:	4606      	mov	r6, r0
 8002486:	d1d6      	bne.n	8002436 <_svfiprintf_r+0x176>
 8002488:	89ab      	ldrh	r3, [r5, #12]
 800248a:	065b      	lsls	r3, r3, #25
 800248c:	f53f af2c 	bmi.w	80022e8 <_svfiprintf_r+0x28>
 8002490:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002492:	b01d      	add	sp, #116	; 0x74
 8002494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002498:	ab03      	add	r3, sp, #12
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	462a      	mov	r2, r5
 800249e:	4638      	mov	r0, r7
 80024a0:	4b06      	ldr	r3, [pc, #24]	; (80024bc <_svfiprintf_r+0x1fc>)
 80024a2:	a904      	add	r1, sp, #16
 80024a4:	f000 f87c 	bl	80025a0 <_printf_i>
 80024a8:	e7eb      	b.n	8002482 <_svfiprintf_r+0x1c2>
 80024aa:	bf00      	nop
 80024ac:	08002b2c 	.word	0x08002b2c
 80024b0:	08002b32 	.word	0x08002b32
 80024b4:	08002b36 	.word	0x08002b36
 80024b8:	00000000 	.word	0x00000000
 80024bc:	08002209 	.word	0x08002209

080024c0 <_printf_common>:
 80024c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024c4:	4616      	mov	r6, r2
 80024c6:	4699      	mov	r9, r3
 80024c8:	688a      	ldr	r2, [r1, #8]
 80024ca:	690b      	ldr	r3, [r1, #16]
 80024cc:	4607      	mov	r7, r0
 80024ce:	4293      	cmp	r3, r2
 80024d0:	bfb8      	it	lt
 80024d2:	4613      	movlt	r3, r2
 80024d4:	6033      	str	r3, [r6, #0]
 80024d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80024da:	460c      	mov	r4, r1
 80024dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80024e0:	b10a      	cbz	r2, 80024e6 <_printf_common+0x26>
 80024e2:	3301      	adds	r3, #1
 80024e4:	6033      	str	r3, [r6, #0]
 80024e6:	6823      	ldr	r3, [r4, #0]
 80024e8:	0699      	lsls	r1, r3, #26
 80024ea:	bf42      	ittt	mi
 80024ec:	6833      	ldrmi	r3, [r6, #0]
 80024ee:	3302      	addmi	r3, #2
 80024f0:	6033      	strmi	r3, [r6, #0]
 80024f2:	6825      	ldr	r5, [r4, #0]
 80024f4:	f015 0506 	ands.w	r5, r5, #6
 80024f8:	d106      	bne.n	8002508 <_printf_common+0x48>
 80024fa:	f104 0a19 	add.w	sl, r4, #25
 80024fe:	68e3      	ldr	r3, [r4, #12]
 8002500:	6832      	ldr	r2, [r6, #0]
 8002502:	1a9b      	subs	r3, r3, r2
 8002504:	42ab      	cmp	r3, r5
 8002506:	dc28      	bgt.n	800255a <_printf_common+0x9a>
 8002508:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800250c:	1e13      	subs	r3, r2, #0
 800250e:	6822      	ldr	r2, [r4, #0]
 8002510:	bf18      	it	ne
 8002512:	2301      	movne	r3, #1
 8002514:	0692      	lsls	r2, r2, #26
 8002516:	d42d      	bmi.n	8002574 <_printf_common+0xb4>
 8002518:	4649      	mov	r1, r9
 800251a:	4638      	mov	r0, r7
 800251c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002520:	47c0      	blx	r8
 8002522:	3001      	adds	r0, #1
 8002524:	d020      	beq.n	8002568 <_printf_common+0xa8>
 8002526:	6823      	ldr	r3, [r4, #0]
 8002528:	68e5      	ldr	r5, [r4, #12]
 800252a:	f003 0306 	and.w	r3, r3, #6
 800252e:	2b04      	cmp	r3, #4
 8002530:	bf18      	it	ne
 8002532:	2500      	movne	r5, #0
 8002534:	6832      	ldr	r2, [r6, #0]
 8002536:	f04f 0600 	mov.w	r6, #0
 800253a:	68a3      	ldr	r3, [r4, #8]
 800253c:	bf08      	it	eq
 800253e:	1aad      	subeq	r5, r5, r2
 8002540:	6922      	ldr	r2, [r4, #16]
 8002542:	bf08      	it	eq
 8002544:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002548:	4293      	cmp	r3, r2
 800254a:	bfc4      	itt	gt
 800254c:	1a9b      	subgt	r3, r3, r2
 800254e:	18ed      	addgt	r5, r5, r3
 8002550:	341a      	adds	r4, #26
 8002552:	42b5      	cmp	r5, r6
 8002554:	d11a      	bne.n	800258c <_printf_common+0xcc>
 8002556:	2000      	movs	r0, #0
 8002558:	e008      	b.n	800256c <_printf_common+0xac>
 800255a:	2301      	movs	r3, #1
 800255c:	4652      	mov	r2, sl
 800255e:	4649      	mov	r1, r9
 8002560:	4638      	mov	r0, r7
 8002562:	47c0      	blx	r8
 8002564:	3001      	adds	r0, #1
 8002566:	d103      	bne.n	8002570 <_printf_common+0xb0>
 8002568:	f04f 30ff 	mov.w	r0, #4294967295
 800256c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002570:	3501      	adds	r5, #1
 8002572:	e7c4      	b.n	80024fe <_printf_common+0x3e>
 8002574:	2030      	movs	r0, #48	; 0x30
 8002576:	18e1      	adds	r1, r4, r3
 8002578:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800257c:	1c5a      	adds	r2, r3, #1
 800257e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002582:	4422      	add	r2, r4
 8002584:	3302      	adds	r3, #2
 8002586:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800258a:	e7c5      	b.n	8002518 <_printf_common+0x58>
 800258c:	2301      	movs	r3, #1
 800258e:	4622      	mov	r2, r4
 8002590:	4649      	mov	r1, r9
 8002592:	4638      	mov	r0, r7
 8002594:	47c0      	blx	r8
 8002596:	3001      	adds	r0, #1
 8002598:	d0e6      	beq.n	8002568 <_printf_common+0xa8>
 800259a:	3601      	adds	r6, #1
 800259c:	e7d9      	b.n	8002552 <_printf_common+0x92>
	...

080025a0 <_printf_i>:
 80025a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80025a4:	7e0f      	ldrb	r7, [r1, #24]
 80025a6:	4691      	mov	r9, r2
 80025a8:	2f78      	cmp	r7, #120	; 0x78
 80025aa:	4680      	mov	r8, r0
 80025ac:	460c      	mov	r4, r1
 80025ae:	469a      	mov	sl, r3
 80025b0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80025b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80025b6:	d807      	bhi.n	80025c8 <_printf_i+0x28>
 80025b8:	2f62      	cmp	r7, #98	; 0x62
 80025ba:	d80a      	bhi.n	80025d2 <_printf_i+0x32>
 80025bc:	2f00      	cmp	r7, #0
 80025be:	f000 80d9 	beq.w	8002774 <_printf_i+0x1d4>
 80025c2:	2f58      	cmp	r7, #88	; 0x58
 80025c4:	f000 80a4 	beq.w	8002710 <_printf_i+0x170>
 80025c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80025cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80025d0:	e03a      	b.n	8002648 <_printf_i+0xa8>
 80025d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80025d6:	2b15      	cmp	r3, #21
 80025d8:	d8f6      	bhi.n	80025c8 <_printf_i+0x28>
 80025da:	a101      	add	r1, pc, #4	; (adr r1, 80025e0 <_printf_i+0x40>)
 80025dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80025e0:	08002639 	.word	0x08002639
 80025e4:	0800264d 	.word	0x0800264d
 80025e8:	080025c9 	.word	0x080025c9
 80025ec:	080025c9 	.word	0x080025c9
 80025f0:	080025c9 	.word	0x080025c9
 80025f4:	080025c9 	.word	0x080025c9
 80025f8:	0800264d 	.word	0x0800264d
 80025fc:	080025c9 	.word	0x080025c9
 8002600:	080025c9 	.word	0x080025c9
 8002604:	080025c9 	.word	0x080025c9
 8002608:	080025c9 	.word	0x080025c9
 800260c:	0800275b 	.word	0x0800275b
 8002610:	0800267d 	.word	0x0800267d
 8002614:	0800273d 	.word	0x0800273d
 8002618:	080025c9 	.word	0x080025c9
 800261c:	080025c9 	.word	0x080025c9
 8002620:	0800277d 	.word	0x0800277d
 8002624:	080025c9 	.word	0x080025c9
 8002628:	0800267d 	.word	0x0800267d
 800262c:	080025c9 	.word	0x080025c9
 8002630:	080025c9 	.word	0x080025c9
 8002634:	08002745 	.word	0x08002745
 8002638:	682b      	ldr	r3, [r5, #0]
 800263a:	1d1a      	adds	r2, r3, #4
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	602a      	str	r2, [r5, #0]
 8002640:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002644:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002648:	2301      	movs	r3, #1
 800264a:	e0a4      	b.n	8002796 <_printf_i+0x1f6>
 800264c:	6820      	ldr	r0, [r4, #0]
 800264e:	6829      	ldr	r1, [r5, #0]
 8002650:	0606      	lsls	r6, r0, #24
 8002652:	f101 0304 	add.w	r3, r1, #4
 8002656:	d50a      	bpl.n	800266e <_printf_i+0xce>
 8002658:	680e      	ldr	r6, [r1, #0]
 800265a:	602b      	str	r3, [r5, #0]
 800265c:	2e00      	cmp	r6, #0
 800265e:	da03      	bge.n	8002668 <_printf_i+0xc8>
 8002660:	232d      	movs	r3, #45	; 0x2d
 8002662:	4276      	negs	r6, r6
 8002664:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002668:	230a      	movs	r3, #10
 800266a:	485e      	ldr	r0, [pc, #376]	; (80027e4 <_printf_i+0x244>)
 800266c:	e019      	b.n	80026a2 <_printf_i+0x102>
 800266e:	680e      	ldr	r6, [r1, #0]
 8002670:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002674:	602b      	str	r3, [r5, #0]
 8002676:	bf18      	it	ne
 8002678:	b236      	sxthne	r6, r6
 800267a:	e7ef      	b.n	800265c <_printf_i+0xbc>
 800267c:	682b      	ldr	r3, [r5, #0]
 800267e:	6820      	ldr	r0, [r4, #0]
 8002680:	1d19      	adds	r1, r3, #4
 8002682:	6029      	str	r1, [r5, #0]
 8002684:	0601      	lsls	r1, r0, #24
 8002686:	d501      	bpl.n	800268c <_printf_i+0xec>
 8002688:	681e      	ldr	r6, [r3, #0]
 800268a:	e002      	b.n	8002692 <_printf_i+0xf2>
 800268c:	0646      	lsls	r6, r0, #25
 800268e:	d5fb      	bpl.n	8002688 <_printf_i+0xe8>
 8002690:	881e      	ldrh	r6, [r3, #0]
 8002692:	2f6f      	cmp	r7, #111	; 0x6f
 8002694:	bf0c      	ite	eq
 8002696:	2308      	moveq	r3, #8
 8002698:	230a      	movne	r3, #10
 800269a:	4852      	ldr	r0, [pc, #328]	; (80027e4 <_printf_i+0x244>)
 800269c:	2100      	movs	r1, #0
 800269e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80026a2:	6865      	ldr	r5, [r4, #4]
 80026a4:	2d00      	cmp	r5, #0
 80026a6:	bfa8      	it	ge
 80026a8:	6821      	ldrge	r1, [r4, #0]
 80026aa:	60a5      	str	r5, [r4, #8]
 80026ac:	bfa4      	itt	ge
 80026ae:	f021 0104 	bicge.w	r1, r1, #4
 80026b2:	6021      	strge	r1, [r4, #0]
 80026b4:	b90e      	cbnz	r6, 80026ba <_printf_i+0x11a>
 80026b6:	2d00      	cmp	r5, #0
 80026b8:	d04d      	beq.n	8002756 <_printf_i+0x1b6>
 80026ba:	4615      	mov	r5, r2
 80026bc:	fbb6 f1f3 	udiv	r1, r6, r3
 80026c0:	fb03 6711 	mls	r7, r3, r1, r6
 80026c4:	5dc7      	ldrb	r7, [r0, r7]
 80026c6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80026ca:	4637      	mov	r7, r6
 80026cc:	42bb      	cmp	r3, r7
 80026ce:	460e      	mov	r6, r1
 80026d0:	d9f4      	bls.n	80026bc <_printf_i+0x11c>
 80026d2:	2b08      	cmp	r3, #8
 80026d4:	d10b      	bne.n	80026ee <_printf_i+0x14e>
 80026d6:	6823      	ldr	r3, [r4, #0]
 80026d8:	07de      	lsls	r6, r3, #31
 80026da:	d508      	bpl.n	80026ee <_printf_i+0x14e>
 80026dc:	6923      	ldr	r3, [r4, #16]
 80026de:	6861      	ldr	r1, [r4, #4]
 80026e0:	4299      	cmp	r1, r3
 80026e2:	bfde      	ittt	le
 80026e4:	2330      	movle	r3, #48	; 0x30
 80026e6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80026ea:	f105 35ff 	addle.w	r5, r5, #4294967295
 80026ee:	1b52      	subs	r2, r2, r5
 80026f0:	6122      	str	r2, [r4, #16]
 80026f2:	464b      	mov	r3, r9
 80026f4:	4621      	mov	r1, r4
 80026f6:	4640      	mov	r0, r8
 80026f8:	f8cd a000 	str.w	sl, [sp]
 80026fc:	aa03      	add	r2, sp, #12
 80026fe:	f7ff fedf 	bl	80024c0 <_printf_common>
 8002702:	3001      	adds	r0, #1
 8002704:	d14c      	bne.n	80027a0 <_printf_i+0x200>
 8002706:	f04f 30ff 	mov.w	r0, #4294967295
 800270a:	b004      	add	sp, #16
 800270c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002710:	4834      	ldr	r0, [pc, #208]	; (80027e4 <_printf_i+0x244>)
 8002712:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002716:	6829      	ldr	r1, [r5, #0]
 8002718:	6823      	ldr	r3, [r4, #0]
 800271a:	f851 6b04 	ldr.w	r6, [r1], #4
 800271e:	6029      	str	r1, [r5, #0]
 8002720:	061d      	lsls	r5, r3, #24
 8002722:	d514      	bpl.n	800274e <_printf_i+0x1ae>
 8002724:	07df      	lsls	r7, r3, #31
 8002726:	bf44      	itt	mi
 8002728:	f043 0320 	orrmi.w	r3, r3, #32
 800272c:	6023      	strmi	r3, [r4, #0]
 800272e:	b91e      	cbnz	r6, 8002738 <_printf_i+0x198>
 8002730:	6823      	ldr	r3, [r4, #0]
 8002732:	f023 0320 	bic.w	r3, r3, #32
 8002736:	6023      	str	r3, [r4, #0]
 8002738:	2310      	movs	r3, #16
 800273a:	e7af      	b.n	800269c <_printf_i+0xfc>
 800273c:	6823      	ldr	r3, [r4, #0]
 800273e:	f043 0320 	orr.w	r3, r3, #32
 8002742:	6023      	str	r3, [r4, #0]
 8002744:	2378      	movs	r3, #120	; 0x78
 8002746:	4828      	ldr	r0, [pc, #160]	; (80027e8 <_printf_i+0x248>)
 8002748:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800274c:	e7e3      	b.n	8002716 <_printf_i+0x176>
 800274e:	0659      	lsls	r1, r3, #25
 8002750:	bf48      	it	mi
 8002752:	b2b6      	uxthmi	r6, r6
 8002754:	e7e6      	b.n	8002724 <_printf_i+0x184>
 8002756:	4615      	mov	r5, r2
 8002758:	e7bb      	b.n	80026d2 <_printf_i+0x132>
 800275a:	682b      	ldr	r3, [r5, #0]
 800275c:	6826      	ldr	r6, [r4, #0]
 800275e:	1d18      	adds	r0, r3, #4
 8002760:	6961      	ldr	r1, [r4, #20]
 8002762:	6028      	str	r0, [r5, #0]
 8002764:	0635      	lsls	r5, r6, #24
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	d501      	bpl.n	800276e <_printf_i+0x1ce>
 800276a:	6019      	str	r1, [r3, #0]
 800276c:	e002      	b.n	8002774 <_printf_i+0x1d4>
 800276e:	0670      	lsls	r0, r6, #25
 8002770:	d5fb      	bpl.n	800276a <_printf_i+0x1ca>
 8002772:	8019      	strh	r1, [r3, #0]
 8002774:	2300      	movs	r3, #0
 8002776:	4615      	mov	r5, r2
 8002778:	6123      	str	r3, [r4, #16]
 800277a:	e7ba      	b.n	80026f2 <_printf_i+0x152>
 800277c:	682b      	ldr	r3, [r5, #0]
 800277e:	2100      	movs	r1, #0
 8002780:	1d1a      	adds	r2, r3, #4
 8002782:	602a      	str	r2, [r5, #0]
 8002784:	681d      	ldr	r5, [r3, #0]
 8002786:	6862      	ldr	r2, [r4, #4]
 8002788:	4628      	mov	r0, r5
 800278a:	f000 f82f 	bl	80027ec <memchr>
 800278e:	b108      	cbz	r0, 8002794 <_printf_i+0x1f4>
 8002790:	1b40      	subs	r0, r0, r5
 8002792:	6060      	str	r0, [r4, #4]
 8002794:	6863      	ldr	r3, [r4, #4]
 8002796:	6123      	str	r3, [r4, #16]
 8002798:	2300      	movs	r3, #0
 800279a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800279e:	e7a8      	b.n	80026f2 <_printf_i+0x152>
 80027a0:	462a      	mov	r2, r5
 80027a2:	4649      	mov	r1, r9
 80027a4:	4640      	mov	r0, r8
 80027a6:	6923      	ldr	r3, [r4, #16]
 80027a8:	47d0      	blx	sl
 80027aa:	3001      	adds	r0, #1
 80027ac:	d0ab      	beq.n	8002706 <_printf_i+0x166>
 80027ae:	6823      	ldr	r3, [r4, #0]
 80027b0:	079b      	lsls	r3, r3, #30
 80027b2:	d413      	bmi.n	80027dc <_printf_i+0x23c>
 80027b4:	68e0      	ldr	r0, [r4, #12]
 80027b6:	9b03      	ldr	r3, [sp, #12]
 80027b8:	4298      	cmp	r0, r3
 80027ba:	bfb8      	it	lt
 80027bc:	4618      	movlt	r0, r3
 80027be:	e7a4      	b.n	800270a <_printf_i+0x16a>
 80027c0:	2301      	movs	r3, #1
 80027c2:	4632      	mov	r2, r6
 80027c4:	4649      	mov	r1, r9
 80027c6:	4640      	mov	r0, r8
 80027c8:	47d0      	blx	sl
 80027ca:	3001      	adds	r0, #1
 80027cc:	d09b      	beq.n	8002706 <_printf_i+0x166>
 80027ce:	3501      	adds	r5, #1
 80027d0:	68e3      	ldr	r3, [r4, #12]
 80027d2:	9903      	ldr	r1, [sp, #12]
 80027d4:	1a5b      	subs	r3, r3, r1
 80027d6:	42ab      	cmp	r3, r5
 80027d8:	dcf2      	bgt.n	80027c0 <_printf_i+0x220>
 80027da:	e7eb      	b.n	80027b4 <_printf_i+0x214>
 80027dc:	2500      	movs	r5, #0
 80027de:	f104 0619 	add.w	r6, r4, #25
 80027e2:	e7f5      	b.n	80027d0 <_printf_i+0x230>
 80027e4:	08002b3d 	.word	0x08002b3d
 80027e8:	08002b4e 	.word	0x08002b4e

080027ec <memchr>:
 80027ec:	4603      	mov	r3, r0
 80027ee:	b510      	push	{r4, lr}
 80027f0:	b2c9      	uxtb	r1, r1
 80027f2:	4402      	add	r2, r0
 80027f4:	4293      	cmp	r3, r2
 80027f6:	4618      	mov	r0, r3
 80027f8:	d101      	bne.n	80027fe <memchr+0x12>
 80027fa:	2000      	movs	r0, #0
 80027fc:	e003      	b.n	8002806 <memchr+0x1a>
 80027fe:	7804      	ldrb	r4, [r0, #0]
 8002800:	3301      	adds	r3, #1
 8002802:	428c      	cmp	r4, r1
 8002804:	d1f6      	bne.n	80027f4 <memchr+0x8>
 8002806:	bd10      	pop	{r4, pc}

08002808 <memcpy>:
 8002808:	440a      	add	r2, r1
 800280a:	4291      	cmp	r1, r2
 800280c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002810:	d100      	bne.n	8002814 <memcpy+0xc>
 8002812:	4770      	bx	lr
 8002814:	b510      	push	{r4, lr}
 8002816:	f811 4b01 	ldrb.w	r4, [r1], #1
 800281a:	4291      	cmp	r1, r2
 800281c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002820:	d1f9      	bne.n	8002816 <memcpy+0xe>
 8002822:	bd10      	pop	{r4, pc}

08002824 <memmove>:
 8002824:	4288      	cmp	r0, r1
 8002826:	b510      	push	{r4, lr}
 8002828:	eb01 0402 	add.w	r4, r1, r2
 800282c:	d902      	bls.n	8002834 <memmove+0x10>
 800282e:	4284      	cmp	r4, r0
 8002830:	4623      	mov	r3, r4
 8002832:	d807      	bhi.n	8002844 <memmove+0x20>
 8002834:	1e43      	subs	r3, r0, #1
 8002836:	42a1      	cmp	r1, r4
 8002838:	d008      	beq.n	800284c <memmove+0x28>
 800283a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800283e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002842:	e7f8      	b.n	8002836 <memmove+0x12>
 8002844:	4601      	mov	r1, r0
 8002846:	4402      	add	r2, r0
 8002848:	428a      	cmp	r2, r1
 800284a:	d100      	bne.n	800284e <memmove+0x2a>
 800284c:	bd10      	pop	{r4, pc}
 800284e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002852:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002856:	e7f7      	b.n	8002848 <memmove+0x24>

08002858 <_free_r>:
 8002858:	b538      	push	{r3, r4, r5, lr}
 800285a:	4605      	mov	r5, r0
 800285c:	2900      	cmp	r1, #0
 800285e:	d040      	beq.n	80028e2 <_free_r+0x8a>
 8002860:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002864:	1f0c      	subs	r4, r1, #4
 8002866:	2b00      	cmp	r3, #0
 8002868:	bfb8      	it	lt
 800286a:	18e4      	addlt	r4, r4, r3
 800286c:	f000 f910 	bl	8002a90 <__malloc_lock>
 8002870:	4a1c      	ldr	r2, [pc, #112]	; (80028e4 <_free_r+0x8c>)
 8002872:	6813      	ldr	r3, [r2, #0]
 8002874:	b933      	cbnz	r3, 8002884 <_free_r+0x2c>
 8002876:	6063      	str	r3, [r4, #4]
 8002878:	6014      	str	r4, [r2, #0]
 800287a:	4628      	mov	r0, r5
 800287c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002880:	f000 b90c 	b.w	8002a9c <__malloc_unlock>
 8002884:	42a3      	cmp	r3, r4
 8002886:	d908      	bls.n	800289a <_free_r+0x42>
 8002888:	6820      	ldr	r0, [r4, #0]
 800288a:	1821      	adds	r1, r4, r0
 800288c:	428b      	cmp	r3, r1
 800288e:	bf01      	itttt	eq
 8002890:	6819      	ldreq	r1, [r3, #0]
 8002892:	685b      	ldreq	r3, [r3, #4]
 8002894:	1809      	addeq	r1, r1, r0
 8002896:	6021      	streq	r1, [r4, #0]
 8002898:	e7ed      	b.n	8002876 <_free_r+0x1e>
 800289a:	461a      	mov	r2, r3
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	b10b      	cbz	r3, 80028a4 <_free_r+0x4c>
 80028a0:	42a3      	cmp	r3, r4
 80028a2:	d9fa      	bls.n	800289a <_free_r+0x42>
 80028a4:	6811      	ldr	r1, [r2, #0]
 80028a6:	1850      	adds	r0, r2, r1
 80028a8:	42a0      	cmp	r0, r4
 80028aa:	d10b      	bne.n	80028c4 <_free_r+0x6c>
 80028ac:	6820      	ldr	r0, [r4, #0]
 80028ae:	4401      	add	r1, r0
 80028b0:	1850      	adds	r0, r2, r1
 80028b2:	4283      	cmp	r3, r0
 80028b4:	6011      	str	r1, [r2, #0]
 80028b6:	d1e0      	bne.n	800287a <_free_r+0x22>
 80028b8:	6818      	ldr	r0, [r3, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	4401      	add	r1, r0
 80028be:	6011      	str	r1, [r2, #0]
 80028c0:	6053      	str	r3, [r2, #4]
 80028c2:	e7da      	b.n	800287a <_free_r+0x22>
 80028c4:	d902      	bls.n	80028cc <_free_r+0x74>
 80028c6:	230c      	movs	r3, #12
 80028c8:	602b      	str	r3, [r5, #0]
 80028ca:	e7d6      	b.n	800287a <_free_r+0x22>
 80028cc:	6820      	ldr	r0, [r4, #0]
 80028ce:	1821      	adds	r1, r4, r0
 80028d0:	428b      	cmp	r3, r1
 80028d2:	bf01      	itttt	eq
 80028d4:	6819      	ldreq	r1, [r3, #0]
 80028d6:	685b      	ldreq	r3, [r3, #4]
 80028d8:	1809      	addeq	r1, r1, r0
 80028da:	6021      	streq	r1, [r4, #0]
 80028dc:	6063      	str	r3, [r4, #4]
 80028de:	6054      	str	r4, [r2, #4]
 80028e0:	e7cb      	b.n	800287a <_free_r+0x22>
 80028e2:	bd38      	pop	{r3, r4, r5, pc}
 80028e4:	20000138 	.word	0x20000138

080028e8 <sbrk_aligned>:
 80028e8:	b570      	push	{r4, r5, r6, lr}
 80028ea:	4e0e      	ldr	r6, [pc, #56]	; (8002924 <sbrk_aligned+0x3c>)
 80028ec:	460c      	mov	r4, r1
 80028ee:	6831      	ldr	r1, [r6, #0]
 80028f0:	4605      	mov	r5, r0
 80028f2:	b911      	cbnz	r1, 80028fa <sbrk_aligned+0x12>
 80028f4:	f000 f8bc 	bl	8002a70 <_sbrk_r>
 80028f8:	6030      	str	r0, [r6, #0]
 80028fa:	4621      	mov	r1, r4
 80028fc:	4628      	mov	r0, r5
 80028fe:	f000 f8b7 	bl	8002a70 <_sbrk_r>
 8002902:	1c43      	adds	r3, r0, #1
 8002904:	d00a      	beq.n	800291c <sbrk_aligned+0x34>
 8002906:	1cc4      	adds	r4, r0, #3
 8002908:	f024 0403 	bic.w	r4, r4, #3
 800290c:	42a0      	cmp	r0, r4
 800290e:	d007      	beq.n	8002920 <sbrk_aligned+0x38>
 8002910:	1a21      	subs	r1, r4, r0
 8002912:	4628      	mov	r0, r5
 8002914:	f000 f8ac 	bl	8002a70 <_sbrk_r>
 8002918:	3001      	adds	r0, #1
 800291a:	d101      	bne.n	8002920 <sbrk_aligned+0x38>
 800291c:	f04f 34ff 	mov.w	r4, #4294967295
 8002920:	4620      	mov	r0, r4
 8002922:	bd70      	pop	{r4, r5, r6, pc}
 8002924:	2000013c 	.word	0x2000013c

08002928 <_malloc_r>:
 8002928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800292c:	1ccd      	adds	r5, r1, #3
 800292e:	f025 0503 	bic.w	r5, r5, #3
 8002932:	3508      	adds	r5, #8
 8002934:	2d0c      	cmp	r5, #12
 8002936:	bf38      	it	cc
 8002938:	250c      	movcc	r5, #12
 800293a:	2d00      	cmp	r5, #0
 800293c:	4607      	mov	r7, r0
 800293e:	db01      	blt.n	8002944 <_malloc_r+0x1c>
 8002940:	42a9      	cmp	r1, r5
 8002942:	d905      	bls.n	8002950 <_malloc_r+0x28>
 8002944:	230c      	movs	r3, #12
 8002946:	2600      	movs	r6, #0
 8002948:	603b      	str	r3, [r7, #0]
 800294a:	4630      	mov	r0, r6
 800294c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002950:	4e2e      	ldr	r6, [pc, #184]	; (8002a0c <_malloc_r+0xe4>)
 8002952:	f000 f89d 	bl	8002a90 <__malloc_lock>
 8002956:	6833      	ldr	r3, [r6, #0]
 8002958:	461c      	mov	r4, r3
 800295a:	bb34      	cbnz	r4, 80029aa <_malloc_r+0x82>
 800295c:	4629      	mov	r1, r5
 800295e:	4638      	mov	r0, r7
 8002960:	f7ff ffc2 	bl	80028e8 <sbrk_aligned>
 8002964:	1c43      	adds	r3, r0, #1
 8002966:	4604      	mov	r4, r0
 8002968:	d14d      	bne.n	8002a06 <_malloc_r+0xde>
 800296a:	6834      	ldr	r4, [r6, #0]
 800296c:	4626      	mov	r6, r4
 800296e:	2e00      	cmp	r6, #0
 8002970:	d140      	bne.n	80029f4 <_malloc_r+0xcc>
 8002972:	6823      	ldr	r3, [r4, #0]
 8002974:	4631      	mov	r1, r6
 8002976:	4638      	mov	r0, r7
 8002978:	eb04 0803 	add.w	r8, r4, r3
 800297c:	f000 f878 	bl	8002a70 <_sbrk_r>
 8002980:	4580      	cmp	r8, r0
 8002982:	d13a      	bne.n	80029fa <_malloc_r+0xd2>
 8002984:	6821      	ldr	r1, [r4, #0]
 8002986:	3503      	adds	r5, #3
 8002988:	1a6d      	subs	r5, r5, r1
 800298a:	f025 0503 	bic.w	r5, r5, #3
 800298e:	3508      	adds	r5, #8
 8002990:	2d0c      	cmp	r5, #12
 8002992:	bf38      	it	cc
 8002994:	250c      	movcc	r5, #12
 8002996:	4638      	mov	r0, r7
 8002998:	4629      	mov	r1, r5
 800299a:	f7ff ffa5 	bl	80028e8 <sbrk_aligned>
 800299e:	3001      	adds	r0, #1
 80029a0:	d02b      	beq.n	80029fa <_malloc_r+0xd2>
 80029a2:	6823      	ldr	r3, [r4, #0]
 80029a4:	442b      	add	r3, r5
 80029a6:	6023      	str	r3, [r4, #0]
 80029a8:	e00e      	b.n	80029c8 <_malloc_r+0xa0>
 80029aa:	6822      	ldr	r2, [r4, #0]
 80029ac:	1b52      	subs	r2, r2, r5
 80029ae:	d41e      	bmi.n	80029ee <_malloc_r+0xc6>
 80029b0:	2a0b      	cmp	r2, #11
 80029b2:	d916      	bls.n	80029e2 <_malloc_r+0xba>
 80029b4:	1961      	adds	r1, r4, r5
 80029b6:	42a3      	cmp	r3, r4
 80029b8:	6025      	str	r5, [r4, #0]
 80029ba:	bf18      	it	ne
 80029bc:	6059      	strne	r1, [r3, #4]
 80029be:	6863      	ldr	r3, [r4, #4]
 80029c0:	bf08      	it	eq
 80029c2:	6031      	streq	r1, [r6, #0]
 80029c4:	5162      	str	r2, [r4, r5]
 80029c6:	604b      	str	r3, [r1, #4]
 80029c8:	4638      	mov	r0, r7
 80029ca:	f104 060b 	add.w	r6, r4, #11
 80029ce:	f000 f865 	bl	8002a9c <__malloc_unlock>
 80029d2:	f026 0607 	bic.w	r6, r6, #7
 80029d6:	1d23      	adds	r3, r4, #4
 80029d8:	1af2      	subs	r2, r6, r3
 80029da:	d0b6      	beq.n	800294a <_malloc_r+0x22>
 80029dc:	1b9b      	subs	r3, r3, r6
 80029de:	50a3      	str	r3, [r4, r2]
 80029e0:	e7b3      	b.n	800294a <_malloc_r+0x22>
 80029e2:	6862      	ldr	r2, [r4, #4]
 80029e4:	42a3      	cmp	r3, r4
 80029e6:	bf0c      	ite	eq
 80029e8:	6032      	streq	r2, [r6, #0]
 80029ea:	605a      	strne	r2, [r3, #4]
 80029ec:	e7ec      	b.n	80029c8 <_malloc_r+0xa0>
 80029ee:	4623      	mov	r3, r4
 80029f0:	6864      	ldr	r4, [r4, #4]
 80029f2:	e7b2      	b.n	800295a <_malloc_r+0x32>
 80029f4:	4634      	mov	r4, r6
 80029f6:	6876      	ldr	r6, [r6, #4]
 80029f8:	e7b9      	b.n	800296e <_malloc_r+0x46>
 80029fa:	230c      	movs	r3, #12
 80029fc:	4638      	mov	r0, r7
 80029fe:	603b      	str	r3, [r7, #0]
 8002a00:	f000 f84c 	bl	8002a9c <__malloc_unlock>
 8002a04:	e7a1      	b.n	800294a <_malloc_r+0x22>
 8002a06:	6025      	str	r5, [r4, #0]
 8002a08:	e7de      	b.n	80029c8 <_malloc_r+0xa0>
 8002a0a:	bf00      	nop
 8002a0c:	20000138 	.word	0x20000138

08002a10 <_realloc_r>:
 8002a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a14:	4680      	mov	r8, r0
 8002a16:	4614      	mov	r4, r2
 8002a18:	460e      	mov	r6, r1
 8002a1a:	b921      	cbnz	r1, 8002a26 <_realloc_r+0x16>
 8002a1c:	4611      	mov	r1, r2
 8002a1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002a22:	f7ff bf81 	b.w	8002928 <_malloc_r>
 8002a26:	b92a      	cbnz	r2, 8002a34 <_realloc_r+0x24>
 8002a28:	f7ff ff16 	bl	8002858 <_free_r>
 8002a2c:	4625      	mov	r5, r4
 8002a2e:	4628      	mov	r0, r5
 8002a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a34:	f000 f838 	bl	8002aa8 <_malloc_usable_size_r>
 8002a38:	4284      	cmp	r4, r0
 8002a3a:	4607      	mov	r7, r0
 8002a3c:	d802      	bhi.n	8002a44 <_realloc_r+0x34>
 8002a3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002a42:	d812      	bhi.n	8002a6a <_realloc_r+0x5a>
 8002a44:	4621      	mov	r1, r4
 8002a46:	4640      	mov	r0, r8
 8002a48:	f7ff ff6e 	bl	8002928 <_malloc_r>
 8002a4c:	4605      	mov	r5, r0
 8002a4e:	2800      	cmp	r0, #0
 8002a50:	d0ed      	beq.n	8002a2e <_realloc_r+0x1e>
 8002a52:	42bc      	cmp	r4, r7
 8002a54:	4622      	mov	r2, r4
 8002a56:	4631      	mov	r1, r6
 8002a58:	bf28      	it	cs
 8002a5a:	463a      	movcs	r2, r7
 8002a5c:	f7ff fed4 	bl	8002808 <memcpy>
 8002a60:	4631      	mov	r1, r6
 8002a62:	4640      	mov	r0, r8
 8002a64:	f7ff fef8 	bl	8002858 <_free_r>
 8002a68:	e7e1      	b.n	8002a2e <_realloc_r+0x1e>
 8002a6a:	4635      	mov	r5, r6
 8002a6c:	e7df      	b.n	8002a2e <_realloc_r+0x1e>
	...

08002a70 <_sbrk_r>:
 8002a70:	b538      	push	{r3, r4, r5, lr}
 8002a72:	2300      	movs	r3, #0
 8002a74:	4d05      	ldr	r5, [pc, #20]	; (8002a8c <_sbrk_r+0x1c>)
 8002a76:	4604      	mov	r4, r0
 8002a78:	4608      	mov	r0, r1
 8002a7a:	602b      	str	r3, [r5, #0]
 8002a7c:	f7fd fece 	bl	800081c <_sbrk>
 8002a80:	1c43      	adds	r3, r0, #1
 8002a82:	d102      	bne.n	8002a8a <_sbrk_r+0x1a>
 8002a84:	682b      	ldr	r3, [r5, #0]
 8002a86:	b103      	cbz	r3, 8002a8a <_sbrk_r+0x1a>
 8002a88:	6023      	str	r3, [r4, #0]
 8002a8a:	bd38      	pop	{r3, r4, r5, pc}
 8002a8c:	20000140 	.word	0x20000140

08002a90 <__malloc_lock>:
 8002a90:	4801      	ldr	r0, [pc, #4]	; (8002a98 <__malloc_lock+0x8>)
 8002a92:	f000 b811 	b.w	8002ab8 <__retarget_lock_acquire_recursive>
 8002a96:	bf00      	nop
 8002a98:	20000144 	.word	0x20000144

08002a9c <__malloc_unlock>:
 8002a9c:	4801      	ldr	r0, [pc, #4]	; (8002aa4 <__malloc_unlock+0x8>)
 8002a9e:	f000 b80c 	b.w	8002aba <__retarget_lock_release_recursive>
 8002aa2:	bf00      	nop
 8002aa4:	20000144 	.word	0x20000144

08002aa8 <_malloc_usable_size_r>:
 8002aa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002aac:	1f18      	subs	r0, r3, #4
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	bfbc      	itt	lt
 8002ab2:	580b      	ldrlt	r3, [r1, r0]
 8002ab4:	18c0      	addlt	r0, r0, r3
 8002ab6:	4770      	bx	lr

08002ab8 <__retarget_lock_acquire_recursive>:
 8002ab8:	4770      	bx	lr

08002aba <__retarget_lock_release_recursive>:
 8002aba:	4770      	bx	lr

08002abc <_init>:
 8002abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002abe:	bf00      	nop
 8002ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ac2:	bc08      	pop	{r3}
 8002ac4:	469e      	mov	lr, r3
 8002ac6:	4770      	bx	lr

08002ac8 <_fini>:
 8002ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aca:	bf00      	nop
 8002acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ace:	bc08      	pop	{r3}
 8002ad0:	469e      	mov	lr, r3
 8002ad2:	4770      	bx	lr
